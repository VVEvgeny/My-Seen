@model MySeenWeb.Models.ShareViewModels.ShareViewModelEventsMin

@Scripts.Render("~/bundles/jquery", "~/bundles/bootstrap")
@Scripts.Render("~/bundles/myseen.table")
@Scripts.Render("~/bundles/knockout")

<br/>

<div data-bind="visible: dataLoading " align="center">
    <img src="~/Content/Images/loading_small.gif" />
</div>

<div data-bind="visible: events().length > 0" style="display: none;">

    <div class="table-responsive">
        <table class="table table-striped" id="table">
            <thead>
                <tr>
                    <th class="col-sm-3">@Resource.Event</th>
                    <th class="col-sm-2">@Resource.To</th>
                    <th class="col-sm-2">@Resource.When</th>
                    <th class="col-sm-1">@Resource.Day</th>
                    <th>|</th>
                    <th class="col-sm-2">@Resource.Last</th>
                    <th class="col-sm-2">@Resource.When</th>
                    <th class="col-sm-1">@Resource.Day</th>
                </tr>
            </thead>
            <tbody data-bind="foreach: events">
                <tr>
                    <td class="align-center" data-bind="text: name"></td>
                    <td class="align-center" data-bind="text: estimatedTo"></td>
                    <td class="align-center" data-bind="text: dateTo"></td>
                    <td class="align-center" data-bind="text: dayOfWeekTo"></td>
                    <td class="align-center">|</td>
                    <!-- ko if: haveHistory -->
                    <td class="align-center" data-bind="text: estimatedLast"></td>
                    <td class="align-center" data-bind="text: dateLast"></td>
                    <td class="align-center" data-bind="text: dayOfWeekLast"></td>
                    <!-- /ko -->
                </tr>
            </tbody>
        </table>
    </div>

    @Html.Partial("../Tools/PaginationKO")

</div>

@Html.Partial("../Tools/VK/_Base")
@Html.Partial("../Tools/Google/_Base")
@Html.Partial("../Tools/Facebook/_Base")

<table class="table table-striped" id="table_shares_likes">
    <tbody>
        <tr>
            <td class="align-center">@Html.Partial("../Tools/VK/Like")</td>
            <td class="align-center">@Html.Partial("../Tools/VK/Share")</td>
        </tr>
        <tr>
            <td class="align-center">@Html.Partial("../Tools/Google/Like")</td>
            <td class="align-center">@Html.Partial("../Tools/Google/Share")</td>
        </tr>
        <tr>
            <td class="align-center">@Html.Partial("../Tools/Facebook/Like")</td>
            <td class="align-center">@Html.Partial("../Tools/Facebook/Share")</td>
        </tr>
    </tbody>
</table>

<table class="table table-striped" id="table_comments">
    <tbody>
        <tr>
            <td class="align-center">@Html.Partial("../Tools/VK/Comments")</td>
        </tr>
        <tr>
            <td class="align-center">@Html.Partial("../Tools/Google/Comments")</td>
        </tr>
        <tr>
            <td class="align-center">@Html.Partial("../Tools/Facebook/Comments")</td>
        </tr>
    </tbody>
</table>

@Html.Partial("Tools/GetPage")


<script language="javascript" type="text/javascript">

    function Event(data) {

        this.name = ko.observable(data.Name);
        this.estimatedTo = ko.observable(data.EstimatedTo);
        this.dateTo = ko.observable(data.DateToText);
        this.dayOfWeekTo = ko.observable(data.DayOfWeekTo);
        this.haveHistory = ko.observable(data.HaveHistory);
        this.estimatedLast = ko.observable(data.EstimatedLast);
        this.dateLast = ko.observable(data.DateLastText);
        this.dayOfWeekLast = ko.observable(data.DayOfWeekLast);
    }

    function EventsViewModel() {

        var self = this;
        self.events = ko.observableArray([]);
        self.dataLoading = ko.observable();
        self.dataLoading(true);

        self.loadData = function (data) {

            var mapped = $.map(data.Data, function (item) { return new Event(item) });
            if (self.events().length > 0) {
                self.events.push.apply(self.events, mapped);
            } else {
                self.events(mapped);
            }

            window.showPagination(data.Pages);

            self.dataLoading(false);
        };

        self.resetData = function () {
            self.events.removeAll();
        };

        self.setLoadingData = function () {
            self.dataLoading(true);
        };
    }

    var model;

    function showPage(data) {

        model.loadData(data);
    }

    function recalcEstimated() {
        //console.log("recalcEstimated events=", model.events().length);
        if (model.events().length > 0) {

            for (var i = 0; i < model.events().length; i++) {

                if (model.events()[i].estimatedTo() === '@Resource.Ready') continue;

                //console.log("EstimatedTo=", model.events()[i].estimatedTo());
                var estimatedTo = model.events()[i].estimatedTo();

                var years = 0;
                var days = 0;
                var hours = 0;
                var minutes = 0;
                var seconds = 0;

                var isMinus = false;
                if (estimatedTo[0] === '-') { //Накапливаем
                    isMinus = true;
                    estimatedTo = estimatedTo.slice(2);
                }

                //console.log("имею строку=", estimatedTo);
                //console.log("формат=", estimatedTo.split(":").length);


                //1 есть секунды
                //2 есть и минуты
                //3 есть и часы
                //4 есть и дни
                //5 есть и год

                if (estimatedTo.split(":").length === 5) {
                    years = estimatedTo.split(":")[0];
                    days = estimatedTo.split(":")[1];
                    hours = estimatedTo.split(":")[2];
                    minutes = estimatedTo.split(":")[3];
                    seconds = estimatedTo.split(":")[4];
                }
                if (estimatedTo.split(":").length === 4) {
                    days = estimatedTo.split(":")[0];
                    hours = estimatedTo.split(":")[1];
                    minutes = estimatedTo.split(":")[2];
                    seconds = estimatedTo.split(":")[3];
                }
                if (estimatedTo.split(":").length === 3) {
                    hours = estimatedTo.split(":")[0];
                    minutes = estimatedTo.split(":")[1];
                    seconds = estimatedTo.split(":")[2];
                }
                if (estimatedTo.split(":").length === 2) {
                    minutes = estimatedTo.split(":")[0];
                    seconds = estimatedTo.split(":")[1];
                }
                if (estimatedTo.split(":").length === 1) {
                    seconds = estimatedTo.split(":")[0];
                }

                //console.log(years+":"+days + ":" + hours + ":" + minutes + ":" + seconds);
                if (years === 0 && days === 0 && hours === 0 && minutes === 0 && (seconds === 0 || seconds === '00')) {
                    model.events()[i].estimatedTo('@Resource.Ready');
                }
                else {
                    if (isMinus) {
                        seconds++;
                    } else {
                        seconds--;
                    }

                    //скорректировать
                    //60 сек => 0 сек +1 мин
                    if (seconds >= 60) {
                        seconds -= 60;
                        minutes++;
                    }
                    if (seconds < 0) {
                        seconds = 59;
                        minutes--;
                    }

                    if (minutes >= 60) {
                        minutes -= 60;
                        hours++;
                    }
                    if (minutes < 0) {
                        minutes = 59;
                        hours--;
                    }

                    if (hours >= 24) {
                        hours -= 24;
                        days++;
                    }
                    if (hours < 0) {
                        hours = 23;
                        days--;
                    }

                    if (days >= 365) {
                        days -= 365;
                        years++;
                    }

                    model.events()[i].estimatedTo(
                        (isMinus === true ? "- " : "")
                        + (years === 0 ? "" : (years + ":"))
                        + (years === 0 && days === 0 ? "" : (days + ":"))
                        + (years === 0 && days === 0 && hours === 0 ? "" : (hours.length < 2 ? ("0" + hours + ":") : (hours + ":")))
                        + (years === 0 && days === 0 && hours === 0 && minutes === 0 ? "" : (minutes.length < 2 ? ("0" + minutes + ":") : (minutes + ":")))
                        + (seconds < 10 ? "0" + seconds : seconds)
                    );
                }
            }
        }
    }

    (function ($) {
        $(function () {

            model = new EventsViewModel();
            ko.applyBindings(model);

            window.sharedKey = '@Model.Key';
            window.sharedPageName = 'events';

            window.getPage(); //Запрос на сервер

            setInterval(recalcEstimated, 1000);

        });
    })(jQuery);
</script>
