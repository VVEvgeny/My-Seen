@{
    Layout = null;
}
@using Microsoft.AspNet.Identity
@using Microsoft.Owin.Security
@using MySeenWeb.Models;
@model HomeViewModel

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1, maximum-scale=1">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <title>@Resource.AppName</title>

    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/jquery", "~/bundles/bootstrap")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/myseen.table")

</head>
<body>
<nav class="navbar navbar-inverse sidebar navbar-fixed-top" role="navigation">
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-sidebar-navbar-collapse-1">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="#">@Resource.AppName</a>
        </div>
        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-sidebar-navbar-collapse-1">
            <ul class="nav navbar-nav">
                @if (Request.IsAuthenticated)
                {
                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown">@Resource.MyMemory <span class="caret"></span><span style="font-size: 16px;" class="pull-right hidden-xs showopacity glyphicon glyphicon-home"></span></a>
                        <ul class="dropdown-menu forAnimate" role="menu">
                            <li><a href="#" data-bind="click: changePage.bind($data,@((int) Defaults.CategoryBase.Indexes.Films))">@Resource.Films<span style="font-size: 16px;" class="pull-right hidden-xs showopacity glyphicon glyphicon-film"></span></a></li>
                            <li><a href="#" data-bind="click: changePage.bind($data,@((int) Defaults.CategoryBase.Indexes.Serials))">@Resource.Serials<span style="font-size: 16px;" class="pull-right hidden-xs showopacity glyphicon glyphicon-film"></span></a></li>
                            <li><a href="#" data-bind="click: changePage.bind($data,@((int) Defaults.CategoryBase.Indexes.Books))">@Resource.Books<span style="font-size: 16px;" class="pull-right hidden-xs showopacity glyphicon glyphicon-book"></span></a></li>
                            <li><a href="#" data-bind="click: changePage.bind($data,@((int) Defaults.CategoryBase.Indexes.Roads))">@Resource.Tracks<span style="font-size: 16px;" class="pull-right hidden-xs showopacity glyphicon glyphicon-road"></span></a></li>
                            <li><a href="#" data-bind="click: changePage.bind($data,@((int) Defaults.CategoryBase.Indexes.Events))">@Resource.Events<span style="font-size: 16px;" class="pull-right hidden-xs showopacity glyphicon glyphicon-time"></span></a></li>
                        </ul>
                    </li>
                    <li><a href="#" data-bind="click: changePage.bind($data,@((int) Defaults.CategoryBase.IndexesExt.Improvements))">@Resource.Improvements<span style="font-size: 16px;" class="pull-right hidden-xs showopacity glyphicon glyphicon-signal"></span></a></li>

                    if (Admin.IsAdmin(User.Identity.GetUserName()))
                    {
                        <li class="dropdown">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown">@Resource.Administration <span class="caret"></span><span style="font-size: 16px;" class="pull-right hidden-xs showopacity glyphicon glyphicon-lock"></span></a>
                            <ul class="dropdown-menu forAnimate" role="menu">
                                <li><a href="#" data-bind="click: changePage.bind($data,@((int) Defaults.CategoryBase.IndexesExt.Users))">@Resource.Users<span style="font-size: 16px;" class="pull-right hidden-xs showopacity glyphicon glyphicon-user"></span></a></li>
                                <li><a href="#" data-bind="click: changePage.bind($data,@((int) Defaults.CategoryBase.IndexesExt.Logs))">@Resource.Logs<span style="font-size: 16px;" class="pull-right hidden-xs showopacity glyphicon glyphicon-scale"></span></a></li>
                                <li><a href="#" data-bind="click: changePage.bind($data,@((int) Defaults.CategoryBase.IndexesExt.Errors))">@Resource.Errors<span style="font-size: 16px;" class="pull-right hidden-xs showopacity glyphicon glyphicon-random"></span></a></li>
                            </ul>
                        </li>
                    }

                    <li><a href="#" data-bind="click: changePage.bind($data,@((int) Defaults.CategoryBase.IndexesExt.Settings))">@Resource.Settings<span style="font-size: 16px;" class="pull-right hidden-xs showopacity glyphicon glyphicon-cog"></span></a></li>
                }
                else
                {
                    <li><a href='#' data-bind="click: function(){modalWindowLogin().modalVisible(true)}">@Resource.Login<span style="font-size: 16px;" class="pull-right hidden-xs showopacity glyphicon glyphicon-log-in"></span></a></li>
                }

                <li><a href='https://play.google.com/store/apps/details?id=com.vve.myseen' target="_blank">@Resource.OurAndroidApp<span style="font-size: 16px;" class="pull-right hidden-xs showopacity glyphicon glyphicon-phone"></span></a></li>
                <li><a href="#" data-bind="click: changePage.bind($data,@((int) Defaults.CategoryBase.IndexesExt.About))">@Resource.About <span style="font-size: 16px;" class="pull-right hidden-xs showopacity glyphicon glyphicon-info-sign"></span></a></li>

                @if (Request.IsAuthenticated)
                {
                    <li><a href="#" id="LogoutButton">@Resource.LogOff<span style="font-size: 16px;" class="pull-right hidden-xs showopacity glyphicon glyphicon-off"></span></a></li>
                }
            </ul>


        </div>
    </div>
</nav>

@if (!Admin.IsDebug)
{
    @Html.Partial("../Analytics/Yandex")
    @Html.Partial("../Analytics/Google")
    //Хочет много контента @Html.Partial("../Ads/Google")
}


<div class="container body-content">

@Scripts.Render("~/bundles/datetimepicker")
@Styles.Render("~/Content/datetimepicker.css")
@Scripts.Render("~/bundles/gmap3", "~/bundles/myseen.gmap")
<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?libraries=geometry&amp;language=@CultureInfoTool.GetCulture()"></script>

<div data-bind="visible: dataLoading " align="center">
    <img src="~/Content/Images/loading_small.gif"/>
</div>

<div class="form-inline" data-bind="visible: pageCanAdd()" style="display: none;">
    <div class="form-group">
        <div class="container">
            <div class="row col-sm-12">
                <div class="form-group">
                    <label for="addButton" style="display: block;">@Resource.AddNew:</label>
                    <button type="button" class="form-control btn btn-primary" id="addButton" data-bind="click: function(){modalWindow().prepareForAdd(this.currentPage());modalWindow().modalVisible(true)}">
                        <span class="glyphicon glyphicon-plus"></span> @Resource.AddNew
                    </button>
                </div>
                <div class="form-group" data-bind="visible: pageCanSearch()" style="display: none;">
                    <label for="quickSearch" style="display: block;">@Resource.QuickSearch:</label>
                    <input type="text" class="form-control" id="quickSearch" style="width: 150px;">
                    <button type="button" class="form-control btn btn-info" id="searchButton">
                        <span class="glyphicon glyphicon-search"></span> @Resource.QuickSearch
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<div data-bind="visible: currentPage() === @((int) Defaults.CategoryBase.IndexesExt.Register)" style="display: none;">
    @Resource.Register
</div>

<div data-bind="visible: currentPage() === @((int) Defaults.CategoryBase.Indexes.Films)" style="display: none;">
    @Resource.Films
</div>
<div data-bind="visible: Film().data().length > 0" style="display: none;">
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
            <tr>
                <th class="col-sm-1"></th>
                <th class="col-sm-6">@Resource.Name</th>
                <th class="col-sm-1">@Resource.Year</th>
                <th class="col-sm-2">@Resource.Seen</th>
                <th class="col-sm-1">@Resource.Genre</th>
                <th class="col-sm-1">@Resource.Rating</th>
            </tr>
            </thead>
            <tbody data-bind="foreach: Film().data">
            <tr>
                <td>
                    <span class="pull-left">
                                    <button class="btn btn-warning btn-xs" data-bind="click: $parent.EditData.bind($data,$index())"> <span class=" glyphicon glyphicon-pencil"></span></button>
                                    <button class="btn btn-xs btn-info" data-bind=" visible: shared, click: $parent.ShareData.bind($data,id())"><span class="glyphicon glyphicon-share"></span></button>
                                </span>
                </td>
                <td class="align-center" data-bind="text: name"></td>
                <td class="align-center" data-bind="text: year"></td>
                <td class="align-center" data-bind="text: seen"></td>
                <td class="align-center" data-bind="text: genre"></td>
                <td class="align-center" data-bind="text: rating"></td>
            </tr>
            </tbody>
        </table>
    </div>
</div>

<div data-bind="visible: currentPage() === @((int) Defaults.CategoryBase.Indexes.Serials)" style="display: none;">
    @Resource.Serials
</div>
<div data-bind="visible: Serial().data().length > 0" style="display: none;">
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
            <tr>
                <th class="col-sm-1"></th>
                <th class="col-sm-3">@Resource.Name</th>
                <th class="col-sm-1">@Resource.Year</th>
                <th class="col-sm-1">@Resource.LastEpisode</th>
                <th class="col-sm-2">@Resource.DateLast</th>
                <th class="col-sm-2">@Resource.DateBegin</th>
                <th class="col-sm-1">@Resource.Genre</th>
                <th class="col-sm-1">@Resource.Rating</th>
            </tr>
            </thead>
            <tbody data-bind="foreach: Serial().data">
            <tr>
                <td>
                    <span class="pull-left">
                                    <button class="btn btn-warning btn-xs" data-bind="click: $parent.EditData.bind($data,$index())"> <span class=" glyphicon glyphicon-pencil"></span></button>
                                    <button class="btn btn-xs btn-info" data-bind=" visible: shared, click: $parent.ShareData.bind($data,id())"><span class="glyphicon glyphicon-share"></span></button>
                                </span>
                </td>
                <td class="align-center" data-bind="text: name"></td>
                <td class="align-center" data-bind="text: year"></td>
                <td class="align-center">
                    <span data-bind="text: season"></span>
                    <span class="pull-right">
                                    <button class="btn btn-xs btn-info" data-bind="click: $parent.AddSeries.bind($data,$index())"><span class="glyphicon glyphicon-plus"></span></button>
                                </span>
                </td>
                <td class="align-center" data-bind="text: dateLast"></td>
                <td class="align-center" data-bind="text: dateBegin"></td>
                <td class="align-center" data-bind="text: genre"></td>
                <td class="align-center" data-bind="text: rating"></td>
            </tr>
            </tbody>
        </table>
    </div>
</div>

<div data-bind="visible: currentPage() === @((int) Defaults.CategoryBase.Indexes.Books)" style="display: none;">
    @Resource.Books
</div>
<div data-bind="visible: Book().data().length > 0" style="display: none;">
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
            <tr>
                <th class="col-sm-1"></th>
                <th class="col-sm-4">@Resource.Name</th>
                <th class="col-sm-1">@Resource.Year</th>
                <th class="col-sm-2">@Resource.Author</th>
                <th class="col-sm-2">@Resource.DateRead</th>
                <th class="col-sm-1">@Resource.Genre</th>
                <th class="col-sm-1">@Resource.Rating</th>
            </tr>
            </thead>
            <tbody data-bind="foreach: Book().data">
            <tr>
                <td>
                    <span class="pull-left">
                                    <button class="btn btn-warning btn-xs" data-bind="click: $parent.EditData.bind($data,$index())"> <span class=" glyphicon glyphicon-pencil"></span></button>
                                    <button class="btn btn-xs btn-info" data-bind=" visible: shared, click: $parent.ShareData.bind($data,id())"><span class="glyphicon glyphicon-share"></span></button>
                                </span>
                </td>
                <td class="align-center" data-bind="text: name"></td>
                <td class="align-center" data-bind="text: year"></td>
                <td class="align-center" data-bind="text: authors"></td>
                <td class="align-center" data-bind="text: dateRead"></td>
                <td class="align-center" data-bind="text: genre"></td>
                <td class="align-center" data-bind="text: rating"></td>
            </tr>
            </tbody>
        </table>
    </div>
</div>

<div data-bind="visible: currentPage() === @((int) Defaults.CategoryBase.Indexes.Events)" style="display: none;">
    @Resource.Events
    <div class="form-inline">
        <div class="form-group">
            <div class="container">
                <div class="form-group">
                    <select class="input-sm" data-bind="options: preparedData().eventSelectList, optionsText: 'text', optionsValue: 'value', value: preparedData().eventSelect"></select>
                </div>
            </div>
        </div>
    </div>
</div>
<div data-bind="visible: Event().data().length > 0" style="display: none;">
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
            <tr>
                <th class="col-sm-1"></th>
                <th class="col-sm-2">@Resource.Event</th>
                <th class="col-sm-2">@Resource.To</th>
                <th class="col-sm-2">@Resource.When</th>
                <th class="col-sm-1">@Resource.Day</th>
                <th style="display: none;"></th>
                <th style="display: none;"></th>
                <th>|</th>
                <th class="col-sm-2">@Resource.Last</th>
                <th class="col-sm-2">@Resource.When</th>
                <th class="col-sm-1">@Resource.Day</th>
            </tr>
            </thead>
            <tbody data-bind="foreach: Event().data">
            <tr>
                <td>
                    <span class="pull-left">
                                    <button class="btn btn-warning btn-xs" data-bind="click: $parent.EditData.bind($data,$index())"> <span class=" glyphicon glyphicon-pencil"></span></button>
                                    <button class="btn btn-xs btn-info" data-bind=" visible: shared, click: $parent.ShareData.bind($data,id())"><span class="glyphicon glyphicon-share"></span></button>
                                </span>
                </td>
                <td class="align-center" data-bind="text: name"></td>
                <td class="align-center" data-bind="text: estimatedTo"></td>
                <td class="align-center" data-bind="text: dateTo"></td>
                <td class="align-center" data-bind="text: dayOfWeekTo"></td>
                <td style="display: none;" data-bind="text: repeatType"></td>
                <td style="display: none;" data-bind="text: date"></td>
                <td class="align-center">|</td>
                <!-- ko if: haveHistory -->
                <td class="align-center" data-bind="text: estimatedLast"></td>
                <td class="align-center" data-bind="text: dateLast"></td>
                <td class="align-center" data-bind="text: dayOfWeekLast"></td>
                <!-- /ko -->
            </tr>
            </tbody>
        </table>
    </div>
</div>

<div data-bind="visible: currentPage() === @((int) Defaults.CategoryBase.Indexes.Roads)" style="display: none;">
    @Resource.Tracks
</div>
<div class="row" data-bind="visible: Road().haveData" style="display: none;">
    <div class="panel panel-primary col-md-3">
        <div class="panel panel-default">
            <div class="panel-heading">
                @Resource.Tracks
                <span class="alert-info small">
                            <select class="input-sm" id="lstYears" data-bind="options: Road().yearsList, optionsText: 'text', optionsValue: 'value', value: Road().selectedYear()"></select>
                        </span>
                <span class="pull-right alert-info small">
                            <button class="btn btn-xs btn-info" data-bind="click: ShareData.bind($data,'All')"><small><span class="glyphicon glyphicon-share"></span></small></button>
                        </span>
            </div>
            <ul class="nav nav-tabs">
                <li data-bind="visible: Road().dataFoot().length>0, css: { active: Road().mainTabFoot}"><a data-toggle="tab" href="#menu1">@Resource.Foot</a></li>
                <li data-bind="visible: Road().dataBike().length>0, css: { active: Road().mainTabBike}"><a data-toggle="tab" href="#menu2">@Resource.Bike</a></li>
                <li data-bind="visible: Road().dataCar().length>0, css: { active: Road().mainTabCar}"><a data-toggle="tab" href="#menu3">@Resource.Car</a></li>
            </ul>
            <div class="tab-content page-size-gmap page-scrolable">
                <div id="menu1" class="list-group tab-pane fade" data-bind="foreach: Road().dataFoot, css: { 'active in': Road().mainTabFoot}">
                    <a href="#" class="list-group-item track-id" data-bind="attr: {id: id}">
                        <h5 class="list-group-item-heading" data-bind="css: {alignCenter: id() < 0}">
                            <span data-bind="text: name"></span>
                            <span class="badge pull-right" data-bind="text: date"></span>
                        </h5>
                        <h6 class="list-group-item-text align-center">@Resource.Distance :<span class="badge pull-right alert-info small" data-bind="text: distance"></span></h6>
                        <h6 class="list-group-item-text align-left">
                            @Resource.Actions :
                            <span class="pull-right alert-info small">
                                        <button class="btn btn-warning btn-xs" data-bind="visible: id() > 0, click: $parent.EditData.bind($data,$index(),1)"> <span class=" glyphicon glyphicon-pencil"></span></button>
                                        <button class="btn btn-xs btn-info" data-bind=" visible: shared, click: $parent.ShareData.bind($data,id())"><small><span class="glyphicon glyphicon-share"></span></small></button>
                                    </span>
                        </h6>
                    </a>
                </div>
                <div id="menu2" class="list-group tab-pane fade" data-bind="foreach: Road().dataBike, css: { 'active in': Road().mainTabBike}">
                    <a href="#" class="list-group-item track-id" data-bind="attr: {id: id}">
                        <h5 class="list-group-item-heading" data-bind="css: {alignCenter: id() < 0}">
                            <span data-bind="text: name"></span>
                            <span class="badge pull-right" data-bind="text: date"></span>
                        </h5>
                        <h6 class="list-group-item-text align-center">@Resource.Distance :<span class="badge pull-right alert-info small" data-bind="text: distance"></span></h6>
                        <h6 class="list-group-item-text align-left">
                            @Resource.Actions :
                            <span class="pull-right alert-info small">
                                        <button class="btn btn-warning btn-xs" data-bind="visible: id() > 0, click: $parent.EditData.bind($data,$index(),3)"> <span class=" glyphicon glyphicon-pencil"></span></button>
                                        <button class="btn btn-xs btn-info" data-bind=" visible: shared, click: $parent.ShareData.bind($data,id())"><small><span class="glyphicon glyphicon-share"></span></small></button>
                                    </span>
                        </h6>
                    </a>
                </div>
                <div id="menu3" class="list-group tab-pane fade" data-bind="foreach: Road().dataCar, css: { 'active in': Road().mainTabCar}">
                    <a href="#" class="list-group-item track-id" data-bind="attr: {id: id}">
                        <h5 class="list-group-item-heading" data-bind="css: {alignCenter: id() < 0}">
                            <span data-bind="text: name"></span>
                            <span class="badge pull-right" data-bind="text: date"></span>
                        </h5>
                        <h6 class="list-group-item-text align-center">@Resource.Distance :<span class="badge pull-right alert-info small" data-bind="text: distance"></span></h6>
                        <h6 class="list-group-item-text align-left">
                            @Resource.Actions :
                            <span class="pull-right alert-info small">
                                        <button class="btn btn-warning btn-xs" data-bind="visible: id() > 0, click: $parent.EditData.bind($data,$index(),2)"> <span class=" glyphicon glyphicon-pencil"></span></button>
                                        <button class="btn btn-xs btn-info" data-bind=" visible: shared, click: $parent.ShareData.bind($data,id())"><small><span class="glyphicon glyphicon-share"></span></small></button>
                                    </span>
                        </h6>
                    </a>
                </div>
            </div>
        </div>
    </div>
    <div class="panel panel-primary col-md-9">
        <div class="panel panel-default">
            <div class="panel-heading">@Resource.Map</div>
            <div id="my_map" class="gmap page-size-gmap"></div>
        </div>
    </div>
</div>









<div data-bind="visible: currentPage() === @((int) Defaults.CategoryBase.IndexesExt.Improvements)" style="display: none;">
    @Resource.Improvements
    <div class="form-inline">
        <div class="form-group">
            <div class="container">
                <div class="row col-sm-12">
                    <div class="form-group">
                        <select class="input-sm" id="lstSelectedEvents" data-bind="options: preparedData().improvementSelectList, optionsText: 'text', optionsValue: 'value', value: preparedData().improvementSelect"></select>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div data-bind="visible: Improvement().data().length > 0" style="display: none;">
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
            <tr>
                <th class="col-sm-1"></th>
                <th class="col-sm-1">@Resource.Complex</th>
                <th class="col-sm-1">@Resource.Found</th>
                <th class="col-sm-1">@Resource.DateFound</th>
                <th class="col-sm-3">@Resource.Description</th>
                <th class="col-sm-1">@Resource.DateEnd</th>
                <th class="col-sm-1">@Resource.Version</th>
                <th class="col-sm-3">@Resource.Description</th>
            </tr>
            </thead>
            <tbody data-bind="foreach: Improvement().data">
            <tr>
                @if (Admin.IsAdmin(User.Identity.Name))
                {
                    <td class="align-center">
                        <span class="pull-left">
                                        <button class="btn btn-xs btn-danger btn-improvement-remove" data-bind="attr: {id: id}"><span class="glyphicon glyphicon-remove"></span></button>
                                    </span>
                    </td>
                }
                else
                {
                    <td class="align-center"></td>
                }
                <td class="align-center" data-bind="text: complex"></td>
                <td class="align-center" data-bind="text: userName"></td>
                <td class="align-center" data-bind="text: dateFound"></td>
                <td class="align-center" data-bind="text: text"></td>
                <td class="align-center" data-bind="text: dateEnd"></td>
                <td class="align-center" data-bind="text: version"></td>
                <!-- ko if: ended -->
                <td class="align-center" data-bind="text: textEnd"></td>
                <!-- /ko -->
                @if (Admin.IsAdmin(User.Identity.Name))
                {
                    <!-- ko ifnot: ended -->
                    <td class="align-center"><button type="button" class="btn btn-success btn-xs btn-block" data-bind="attr: {id: id}"><span class=" glyphicon glyphicon-ok"></span>&nbsp;@Resource.Close</button></td>
                    <!-- /ko -->
                }
            </tr>
            </tbody>
        </table>
    </div>
</div>

<div data-bind="visible: currentPage() === @((int) Defaults.CategoryBase.IndexesExt.Users)" style="display: none;">
    @Resource.Users
</div>
<div data-bind="visible: User().data().length > 0" style="display: none;">

    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
            <tr>
                <th class="col-sm-4">@Resource.UserName</th>
                <th class="col-sm-1">@Resource.RegisterDate</th>
                <th class="col-sm-1">@Resource.LastAction</th>
                <th class="col-sm-1">@Resource.CultureName</th>
                <th class="col-sm-1">@Resource.FilmsCount</th>
                <th class="col-sm-1">@Resource.SerialsCount</th>
                <th class="col-sm-1">@Resource.BooksCount</th>
                <th class="col-sm-1">@Resource.TracksCount</th>
                <th class="col-sm-1">@Resource.EventsCount</th>
            </tr>
            </thead>
            <tbody data-bind="foreach: User().data">
            <tr>
                <td class="align-center" data-bind="text: name"></td>
                <td class="align-center" data-bind="text: registerDate"></td>
                <td class="align-center" data-bind="text: lastAction"></td>
                <td class="align-center" data-bind="text: culture"></td>
                <td class="align-center" data-bind="text: filmsCount"></td>
                <td class="align-center" data-bind="text: serialsCount"></td>
                <td class="align-center" data-bind="text: booksCount"></td>
                <td class="align-center" data-bind="text: tracksCount"></td>
                <td class="align-center" data-bind="text: eventsCount"></td>
            </tr>
            </tbody>
        </table>
    </div>
</div>

<div data-bind="visible: currentPage() === @((int) Defaults.CategoryBase.IndexesExt.Logs)" style="display: none;">
    @Resource.Logs
</div>
<div data-bind="visible: Log().data().length > 0" style="display: none;">

    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
            <tr>
                <th class="col-sm-1">@Resource.UserName</th>
                <th class="col-sm-2">@Resource.UserAgent</th>
                <th class="col-sm-1">@Resource.IPAdress</th>
                <th class="col-sm-1">@Resource.FirstCall</th>
                <th class="col-sm-1">@Resource.DateLast</th>
                <th class="col-sm-1">@Resource.Amount</th>
                <th class="col-sm-1">@Resource.PageName</th>
                <th class="col-sm-4">@Resource.AddData</th>
            </tr>
            </thead>
            <tbody data-bind="foreach: Log().data">
            <tr>
                <td class="align-center" data-bind="text: userName"></td>
                <td class="align-center" data-bind="text: userAgent"></td>
                <td class="align-center" data-bind="text: ipAdress"></td>
                <td class="align-center" data-bind="text: dateFirst"></td>
                <td class="align-center" data-bind="text: dateLast"></td>
                <td class="align-center" data-bind="text: count"></td>
                <td class="align-center" data-bind="text: pageName"></td>
                <td class="align-center" data-bind="foreach: addData">
                    <div data-bind="text: $data">
                    </div>
                </td>
            </tr>
            </tbody>
        </table>
    </div>
</div>

<div data-bind="visible: currentPage() === @((int) Defaults.CategoryBase.IndexesExt.Errors)" style="display: none;">
    @Resource.Errors
</div>
<div data-bind="visible: Error().data().length > 0" style="display: none;">

    <div class="table-responsive">
        <table class="table table-striped" id="table">
            <thead>
            <tr>
                <th class="col-sm-1"></th>
                <th class="col-sm-1">@Resource.When</th>
                <th class="col-sm-1">@Resource.Host</th>
                <th class="col-sm-1">@Resource.Type</th>
                <th class="col-sm-1">@Resource.Message</th>
                <th class="col-sm-1">@Resource.Level</th>
                <th class="col-sm-3">@Resource.StackTrace</th>
                <th class="col-sm-3">@Resource.Variables</th>
            </tr>
            </thead>
            <tbody data-bind="foreach: Error().data">
            <tr>
                @if (Admin.IsAdmin(User.Identity.Name))
                {
                    <td class="align-center"><button type="button" class="btn btn-danger btn-xs" data-bind="attr: {id: id}"><span class="glyphicon glyphicon-remove"></span></button></td>
                }
                else
                {
                    <td class="align-center"></td>
                }
                <td class="align-center" data-bind="text: dateTimeStamp"></td>
                <td class="align-center" data-bind="text: host"></td>
                <td class="align-center" data-bind="text: type"></td>
                <td class="align-center" data-bind="text: message"></td>
                <td class="align-center" data-bind="text: level"></td>
                <td class="align-center" data-bind="text: stackTrace"></td>
                <td class="align-center" data-bind="text: variables"></td>
            </tr>
            </tbody>
        </table>
    </div>
</div>







<div data-bind="visible: currentPage() === @((int) Defaults.CategoryBase.IndexesExt.About)" style="display: none;">
    <h3 class="align-center">@Resource.AboutText15</h3>
    <div class="div-about-all">
        <h4>@Resource.AboutText1</h4>
        <br/>
        <h4>@Resource.AboutText2</h4>
        <br/>
        <button type="button" class="btn btn-info btn-md myseen-button-mobile-about" id="seenFilm">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.AboutText3
        </button>
        <br/>
        <button type="button" class="btn btn-warning btn-md myseen-button-mobile-about" id="addFilm">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.AboutText4
        </button>
        <br/>
        <br/>
        <button type="button" class="btn btn-info btn-md myseen-button-mobile-about" id="seenSerial">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.AboutText5
        </button>
        <br/>
        <button type="button" class="btn btn-warning btn-md myseen-button-mobile-about" id="addSerial">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.AboutText6
        </button>
        <br/>
        <br/>
        <button type="button" class="btn btn-info btn-md myseen-button-mobile-about" id="readedBook">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.AboutText7
        </button>
        <br/>
        <button type="button" class="btn btn-warning btn-md myseen-button-mobile-about" id="addBook">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.AboutText8
        </button>
        <br/>
        <br/>
        <button type="button" class="btn btn-info btn-md myseen-button-mobile-about" id="beenRoads">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.AboutText9
        </button>
        <br/>
        <button type="button" class="btn btn-warning btn-md myseen-button-mobile-about" id="addRoad">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.AboutText10
        </button>
        <button type="button" class="btn btn-warning btn-md myseen-button-mobile-about" id="addRoadEditor">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.AboutText11
        </button>
        <button type="button" class="btn btn-warning btn-md myseen-button-mobile-about" id="addShareRoad">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.Share
        </button>
        <br/>
        <br/>
        <h4>@Resource.AboutText12</h4>
        <button type="button" class="btn btn-info btn-md myseen-button-mobile-about" id="editFilm">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.Films
        </button>
        <br/>
        <button type="button" class="btn btn-info btn-md myseen-button-mobile-about" id="editSerial">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.Serials
        </button>
        <br/>
        <button type="button" class="btn btn-info btn-md myseen-button-mobile-about" id="editBook">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.Books
        </button>
        <br/>
        <button type="button" class="btn btn-info btn-md myseen-button-mobile-about" id="editRoad">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.Tracks
        </button>
        <button type="button" class="btn btn-info btn-md myseen-button-mobile-about" id="editRoadEditor">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.AboutText13
        </button>
        <button type="button" class="btn btn-info btn-md myseen-button-mobile-about" id="shareRoad">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.AboutText16
        </button>
        <br/>
        <h4>@Resource.AboutText14</h4>
        <br/>
        <h4>@Resource.AboutText17</h4>
        <br/>
        <button type="button" class="btn btn-info btn-md myseen-button-mobile-about" id="configCreatePassword">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.AboutText18
        </button>
        <button type="button" class="btn btn-info btn-md myseen-button-mobile-about" id="configChangeExtServices">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.AboutText19
        </button>
        <button type="button" class="btn btn-info btn-md myseen-button-mobile-about" id="configChangeLanguage">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.AboutText20
        </button>
        <button type="button" class="btn btn-info btn-md myseen-button-mobile-about" id="configChangeRpp">
            <span class="glyphicon glyphicon-picture"></span>
            &nbsp;@Resource.AboutText21
        </button>
    </div>
</div>

<div class="modal fade modal-window" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" id="ModalWindowAbout">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="col-sm-12" id="data">
                <img id="image" src="@Url.Content("~/Content/Images/browser-chrome.png")" alt=""/>
            </div>
        </div>
    </div>
</div>











<div data-bind="visible: currentPage() === @((int) Defaults.CategoryBase.IndexesExt.Settings)" style="display: none;">
    @Resource.Manage
    <h4>@Resource.ChangeYourAccountSettings</h4>
    <hr/>
    <dl class="dl-horizontal">
        <dt>@Resource.Password:</dt>
        <dd data-bind="visible: Setting().hasPassword" style="display: none;">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Изменение пароля" data-bind="click: changePage.bind($data,@((int) Defaults.CategoryBase.IndexesExt.ChangePassword))" class="btn btn-default">
            </div>
        </dd>
        <dd data-bind="visible: !Setting().hasPassword " style="display: none;">
            @Resource.Create
        </dd>

        <dt>@Resource.ExternalLogins:</dt>
        <dd>
            <span data-bind="text: Setting().countLogins"></span>
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@Resource.Manage" data-bind="click: changePage.bind($data,@((int) Defaults.CategoryBase.IndexesExt.ExternalProviders))" class="btn btn-default">
            </div>
        </dd>
    </dl>
    <dl class="dl-horizontal">
        <dt>@Resource.SelectLanguage</dt>
        <dd>
            <select class="input-sm" id="lstLangs" data-bind="options: Setting().langList, optionsText: 'text', optionsValue: 'value', value: Setting().lang()"></select>
        </dd>
    </dl>
    <dl class="dl-horizontal">
        <dt>@Resource.RecordPerPage</dt>
        <dd>
            <select class="input-sm" id="lstRpp" data-bind="options: Setting().rppList, optionsText: 'text', optionsValue: 'value', value: Setting().rpp()"></select>
            <div id="RPPSaved" class="text-success" style="display: none;">@Resource.Saved</div>
        </dd>
    </dl>
    <dl class="dl-horizontal">
        <dt>@Resource.MarkersOnRoads</dt>
        <dd>
            <select class="input-sm" id="lstMoR" data-bind="options: Setting().markersOnRoadsList, optionsText: 'text', optionsValue: 'value', value: Setting().markers()"></select>
            <div id="MarkersOnRoadsSaved" class="text-success" style="display: none;">@Resource.Saved</div>
        </dd>
    </dl>
    <dl class="dl-horizontal">
        <dt>Сервисы ВК</dt>
        <dd>
            <select class="input-sm" id="lstVk" data-bind="options: Setting().vkServiceEnabledList, optionsText: 'text', optionsValue: 'value', value: Setting().vkServiceEnabledInt()"></select>
            <div id="VkServiceEnabledSaved" class="text-success" style="display: none;">@Resource.Saved</div>
        </dd>
    </dl>
    <dl class="dl-horizontal">
        <dt>Сервисы Гугл</dt>
        <dd>
            <select class="input-sm" id="lstGoogle" data-bind="options: Setting().googleServiceEnabledList, optionsText: 'text', optionsValue: 'value', value: Setting().googleServiceEnabledInt()"></select>
            <div id="GoogleServiceEnabledSaved" class="text-success" style="display: none;">@Resource.Saved</div>
        </dd>
    </dl>
    <dl class="dl-horizontal">
        <dt>Сервисы фейсбук</dt>
        <dd>
            <select class="input-sm" id="lstFacebook" data-bind="options: Setting().facebookServiceEnabledList, optionsText: 'text', optionsValue: 'value', value: Setting().facebookServiceEnabledInt()"></select>
            <div id="FacebookServiceEnabledSaved" class="text-success" style="display: none;">@Resource.Saved</div>
        </dd>
    </dl>
    @if (!Admin.IsDebug)
    {
        <div id="vkServicesDiv">
            @Html.Partial("../Tools/Services/VK/_Base")
            @Html.Partial("../Tools/Services/VK/Subscribe")
        </div>
        <div id="googleServicesDiv">
            @Html.Partial("../Tools/Services/Google/_Base")
            @Html.Partial("../Tools/Services/Google/Follow")
        </div>
    }
    <footer class="row">
        <div class="text-center">
            <p class="text-muted small">@Resource.SiteVersion @Versions.Web / @Resource.LibraryVersion @Resource.LibVersionNum</p>
        </div>
    </footer>
</div>

<div data-bind="visible: currentPage() === @((int) Defaults.CategoryBase.IndexesExt.ChangePassword)" style="display: none;">
    <h2>@Resource.ChangeYourPassword .</h2>
    <div class="form-group">
        <label class="col-md-2 control-label" for="OldPassword">Текущий пароль</label>
        <div class="col-md-10">
            <input class="form-control" data-val="true" data-val-required="The Текущий пароль field is required." id="OldPassword" name="OldPassword" type="password">
        </div>
    </div>
    <div class="form-group">
        <label class="col-md-2 control-label" for="NewPassword">Новый пароль</label>
        <div class="col-md-10">
            <input class="form-control" data-val="true" data-val-length="Новый пароль должен быть не менее 6 символов." data-val-length-max="100" data-val-length-min="6" data-val-required="The Новый пароль field is required." id="NewPassword" name="NewPassword" type="password">
        </div>
    </div>
    <div class="form-group">
        <label class="col-md-2 control-label" for="ConfirmPassword">Подтверждение нового пароля</label>
        <div class="col-md-10">
            <input class="form-control" data-val="true" data-val-equalto="Введенный пароль и подтверждение не совпадают." data-val-equalto-other="*.NewPassword" id="ConfirmPassword" name="ConfirmPassword" type="password">
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="@Resource.ChangeYourPassword" class="btn btn-default"/>
        </div>
    </div>
</div>

<div data-bind="visible: currentPage() === @((int) Defaults.CategoryBase.IndexesExt.ExternalProviders)" style="display: none;">
    <h2>@Resource.ManageYourExternalLogins .</h2>

    Пока не реализовано

</div>

<div data-bind="visible: Pagination().needVisible()" style="display: none;">

    <div class="text-center pagination-more-div" style="display: none;" data-bind="visible: !Pagination().isLastPage()">
        <ul class="pagination pagination-more pagination-sm">
            <li class="pagination-page-more" data-bind="click: getNewPaginationPage.bind($data,Pagination().currentPage()+1,false)"><a href="#">@Resource.Load</a></li>
        </ul>
    </div>

    <div class="text-center pagination-div">
        <ul class="pagination pagination-main pagination-sm">
            <li class="disabled" style="display: none;" data-bind="visible: Pagination().isFirstPage()"><a href="#">←</a></li>
            <li class="pagination-page" data-bind="click: getNewPaginationPage.bind($data,Pagination().currentPage()-1,true), visible: !Pagination().isFirstPage()"><a href="#">←</a></li>
            <!-- ko foreach: Pagination().data -->
            <li class="disabled" data-bind="visible: prevSkip"><a href="#">...</a></li>
            <li class="pagination-page" data-bind="click: $parent.getNewPaginationPage.bind($data,id(),true), css: { 'active': current }"><a href="#" data-bind="text: id"></a></li>
            <!-- /ko -->
            <li class="disabled" style="display: none;" data-bind="visible: Pagination().isLastPage()"><a href="#">→</a></li>
            <li class="pagination-page" data-bind="click: getNewPaginationPage.bind($data,Pagination().currentPage()+1,true), visible: !Pagination().isLastPage()"><a href="#">→</a></li>
        </ul>
    </div>
</div>


<div class="modal fade modal-window" tabindex="-2" role="dialog" aria-labelledby="mySmallModalLabel" id="ModalWindow" data-bind="modal:modalWindow().modalVisible">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close myseen-modal-close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title text-center" data-bind="text: modalWindow().title"></h4>
            </div>
            <div class="modal-body">
                <div class="form-group" style="display: none;" data-bind="value: modalWindow().modalTextRecorId">
                </div>
                <div class="form-horizontal">
                    <div class="form-group" style="display: none;" data-bind="visible: modalWindow().modalFieldName">
                        <label for="modalFieldName" class="col-sm-2 control-label">@Resource.Name</label>
                        <div class="col-sm-10">
                            <input type="text" class="form-control" id="modalFieldName" placeholder="@Resource.Name" data-bind="value: modalWindow().modalTextName">
                        </div>
                    </div>
                    <div class="form-group" style="display: none;" data-bind="visible: modalWindow().modalFieldAuthor">
                        <label for="modalFieldAuthor" class="col-sm-2 control-label">@Resource.Author</label>
                        <div class="col-sm-10">
                            <input type="text" class="form-control" id="modalFieldAuthor" placeholder="@Resource.Author" data-bind="value: modalWindow().modalTextAuthor">
                        </div>
                    </div>
                    <div class="form-group" style="display: none;" data-bind="visible: modalWindow().modalFieldYear">
                        <label for="modalFieldYear" class="col-sm-2 control-label">@Resource.Year</label>
                        <div class="col-sm-10">
                            <input type="number" min="1900" max="@(DateTime.Now.Year)" class="form-control" id="modalFieldYear" placeholder="@Resource.Year" value="@(DateTime.Now.Year)" data-bind="value: modalWindow().modalTextYear">
                        </div>
                    </div>
                    <div class="form-group" style="display: none;" data-bind="visible: modalWindow().modalFieldSeason">
                        <label for="modalFieldSeason" class="col-sm-2 control-label">@Resource.Season</label>
                        <div class="col-sm-10">
                            <input type="number" min="1" max="100" class="form-control" id="modalFieldSeason" placeholder="@Resource.Season" data-bind="value: modalWindow().modalTextSeason">
                        </div>
                    </div>
                    <div class="form-group" style="display: none;" data-bind="visible: modalWindow().modalFieldSeries">
                        <label for="modalFieldSeries" class="col-sm-2 control-label">@Resource.Series</label>
                        <div class="col-sm-10">
                            <input type="number" min="1" max="100" class="form-control" id="modalFieldSeries" placeholder="@Resource.Series" data-bind="value: modalWindow().modalTextSeries">
                        </div>
                    </div>
                    <div class="form-group" style="display: none;" data-bind="visible: modalWindow().modalFieldDateTime">
                        <label for="modalFieldDateTime" class="col-sm-2 control-label">@Resource.When</label>
                        <div class="col-sm-10">
                            <input type="text" class="form-control" id="modalFieldDateTime" placeholder="@DateTime.Now" data-bind="value: modalWindow().modalTextDateTime"/>
                        </div>
                    </div>
                    <div class="form-group" style="display: none;" data-bind="visible: modalWindow().modalFieldGenre">
                        <label class="col-sm-2 control-label">@Resource.Genre</label>
                        <div class="col-sm-10">
                            <select class="form-control input-sm" data-bind="options: modalWindow().genreList, optionsText: 'text', optionsValue: 'value', value: modalWindow().modalTextGenre"></select>
                        </div>
                    </div>
                    <div class="form-group" style="display: none;" data-bind="visible: modalWindow().modalFieldRating">
                        <label class="col-sm-2 control-label">@Resource.Rating</label>
                        <div class="col-sm-10">
                            <select class="form-control input-sm" data-bind="options: modalWindow().ratingList, optionsText: 'text', optionsValue: 'value', value: modalWindow().modalTextRating"></select>
                        </div>
                    </div>
                    <div class="form-group" style="display: none;" data-bind="visible: modalWindow().modalFieldEventType">
                        <label class="col-sm-2 control-label">@Resource.Type</label>
                        <div class="col-sm-10">
                            <select class="form-control input-sm" data-bind="options: modalWindow().eventTypeList, optionsText: 'text', optionsValue: 'value', value: modalWindow().modalTextEventType"></select>
                        </div>
                    </div>
                    <div class="form-group" style="display: none;" data-bind="visible: modalWindow().modalFieldRoadType">
                        <label class="col-sm-2 control-label">@Resource.Type</label>
                        <div class="col-sm-10">
                            <select class="form-control input-sm" data-bind="options: modalWindow().roadTypeList, optionsText: 'text', optionsValue: 'value', value: modalWindow().modalTextRoadType"></select>
                        </div>
                    </div>
                    <div class="form-group" style="display: none;" data-bind="visible: modalWindow().modalFieldRoadCoordinates">
                        <label class="col-sm-2 control-label">@Resource.Coordinates</label>
                        <div class="col-sm-10">
                            <textarea class="form-control" cols="55" placeholder="Latitude,Longitude;Latitude,Longitude;..." rows="5" data-bind="value: modalWindow().modalTextRoadCoordinates"></textarea>
                        </div>
                    </div>
                    <div class="form-group" style="display: none;" data-bind="visible: modalWindow().modalFieldImprovementDescription">
                        <label for="bugDesc" class="col-sm-2 control-label">@Resource.Description</label>
                        <div class="col-sm-10">
                            <input type="text" class="form-control bag-name" id="bugDesc" placeholder="@Resource.Description" data-bind="value: modalWindow().modalTextImprovementDescription">
                        </div>
                    </div>
                    <div class="form-group" style="display: none;" data-bind="visible: modalWindow().modalFieldImprovementComplex">
                        <label class="col-sm-2 control-label">@Resource.Complex</label>
                        <div class="col-sm-10">
                            <select class="form-control input-sm" data-bind="options: modalWindow().improvementTypeList, optionsText: 'text', optionsValue: 'value', value: modalWindow().modalTextImprovementType"></select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <div class="align-center row">
                    <button type="button" class="btn btn-info btn-share" style="display: none;" id="modalButtonShare" data-bind="visible: modalWindow().modalButtonShare, click: ShareData.bind($data,modalWindow().modalTextRecorId())">
                        <span class="glyphicon glyphicon-plus"></span>
                        &nbsp;@Resource.Share
                    </button>
                    <button type="button" class="btn btn-danger" style="display: none;" id="modalButtonDelete" data-bind="visible: modalWindow().modalButtonDelete, click: DeleteData">
                        <span class="glyphicon glyphicon-trash"></span>
                        &nbsp;@Resource.Delete
                    </button>
                    <button type="button" class="btn btn-success" style="display: none;" id="modalButtonSave" data-bind="visible: modalWindow().modalButtonSave, click: SaveData">
                        <span class="glyphicon glyphicon-ok"></span>
                        &nbsp;@Resource.SaveСhanges
                    </button>
                </div>
                <button type="button" class="btn btn-success btn-block" style="display: none;" id="modalButtonAdd" data-bind="visible: modalWindow().modalButtonAdd, click: AddData">
                    <span class="glyphicon glyphicon-ok"></span>
                    &nbsp;@Resource.Add
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade modal-window" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" id="ModalShareWindow" data-bind="modal:modalWindowShare().modalVisible">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close myseen-modal-close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title text-center">@Resource.Share</h4>
            </div>
            <div class="modal-body">
                <div align="center" data-bind="visible: modalWindowShare().modalFieldLoading()" style="display: none;">
                    <img src="~/Content/Images/loading_small.gif"/>
                </div>
                <div class="form-horizontal" data-bind="visible: !modalWindowShare().modalFieldLoading()" style="display: none;">
                    <div class="form-group">
                        <label for="shareLink" class="col-sm-2 control-label">@Resource.Link</label>
                        <div class="col-sm-10">
                            <input type="text" class="form-control share-name col-sm-10" id="shareLink" placeholder="@Resource.Link" data-bind="value: modalWindowShare().modalTextLink">
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-12">
                            <button type="button" class="form-control btn btn-info" data-bind="visible: modalWindowShare().modalButtonTry, click: function(){TryShare();}">@Resource.Try &nbsp;<span class="glyphicon glyphicon-arrow-right"></span></button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-info btn-block" data-bind="visible: modalWindowShare().modalButtonGet, click: function(){GenerateShare();}">
                    <span class="glyphicon glyphicon-plus"></span>
                    &nbsp;@Resource.Add @Resource.Share
                </button>
                <button type="button" class="btn btn-danger btn-block" data-bind="visible: modalWindowShare().modalButtonDelete, click: function(){DeleteShare();}">
                    <span class="glyphicon glyphicon-trash"></span>
                    &nbsp;@Resource.Delete @Resource.Share
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade modal-window" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" id="LoginModalWindow" data-bind="modal:modalWindowLogin().modalVisible">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close myseen-modal-close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title text-center">@Resource.Login</h4>
            </div>
            <div class="modal-body">
                <div class="form-horizontal" style="margin-left: -1px;">
                    @{
                        var loginProviders = Context.GetOwinContext().Authentication.GetExternalAuthenticationTypes();
                        var authenticationDescriptions = loginProviders as IList<AuthenticationDescription> ?? loginProviders.ToList();
                        if (authenticationDescriptions.Any() || Nemiro.OAuth.OAuthManager.RegisteredClients.Count != 0)
                        {
                            <div class="form-group col-sm-12">
                                <button type="button" class="btn btn-danger btn-md btn-block" data-bind="click: function(){modalWindowLoginExternal().modalVisible(true)}">
                                    <span class="glyphicon glyphicon-log-in"></span>
                                    &nbsp;@Resource.UseAnotherServiceToLogIn
                                </button>
                            </div>
                        }
                    }
                    <div class="form-group col-sm-12">
                        <button type="button" class="btn btn-warning btn-block" data-bind="click: function(){modalWindowLogin().modalVisible(false); changePage(@((int) Defaults.CategoryBase.IndexesExt.Register));}">
                            <span class="glyphicon glyphicon-user"></span>
                            &nbsp;@Resource.TxtForLogin2
                        </button>
                    </div>
                    <div class="form-group">
                        <label for="userName" class="col-sm-2 control-label">@Resource.Email</label>
                        <div class="col-sm-10">
                            <input type="text" class="form-control" id="userName" placeholder="@Resource.Email">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="password" class="col-sm-2 control-label">@Resource.Password</label>
                        <div class="col-sm-10">
                            <input type="password" class="form-control" id="password" placeholder="@Resource.Password"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-12">
                            @Html.CheckBox("RememberMe", true)
                            <label for="RememberMe" class="ontrol-label">@Resource.Remember</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success btn-block" id="LoginButton">
                    <span class="glyphicon glyphicon-ok"></span>
                    &nbsp;@Resource.Login
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade modal-window" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" id="LoginExternalModalWindow" data-bind="modal:modalWindowLoginExternal().modalVisible">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <div class="form-horizontal">
                    @{
                        using (Html.BeginForm("ExternalLogin", "Account"))
                        {

                            @Html.AntiForgeryToken()
                            foreach (var p in authenticationDescriptions)
                            {
                                <div class="col-sm-12">
                                    <button type="submit" class="btn btn-primary btn-block" id="@p.AuthenticationType" name="provider" value="@p.AuthenticationType" title="@Resource.LogInUsingYour @p.Caption @Resource.Account ">@p.AuthenticationType</button>
                                </div>
                            }
                            foreach (var p in Nemiro.OAuth.OAuthManager.RegisteredClients)
                            {
                                <div class="col-sm-12">
                                    <button type="submit" class="btn btn-primary btn-block" id="@p.Key" name="provider" value="@p.Key" title="@Resource.LogInUsingYour @p.Value.ProviderName @Resource.Account ">@p.Key</button>
                                </div>
                            }
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>









<script language="javascript" type="text/javascript">

    function sendRequest(innerUrl, innerData) {

        console.log("sendRequest = ", innerUrl);

        $.ajax({
            type: 'POST',
            url: innerUrl,
            data: innerData,
            dataType: 'json',
            success: function(response) {

                if (response.error) {
                    alert(response.error);
                } else {
                    console.log("location.href = ", innerUrl);
                    window.location.href = '/';
                }
            },
            error: function(err) {
                alert(err);
            }
        });

        return false;
    }

    ko.bindingHandlers.modal = {
        init: function(element, valueAccessor) {
            $(element).modal({
                show: false
            });

            var value = valueAccessor();
            if (typeof value === 'function') {
                $(element).on('hide.bs.modal', function() {
                    value(false);
                });
            }
            ko.utils.domNodeDisposal.addDisposeCallback(element, function() {
                $(element).modal("destroy");
            });

        },
        update: function(element, valueAccessor) {
            var value = valueAccessor();
            if (ko.utils.unwrapObservable(value)) {
                $(element).modal('show');
            } else {
                $(element).modal('hide');
            }
        }
    }

    var typeFilm = @((int) Defaults.CategoryBase.Indexes.Films);
    var typeSerial = @((int) Defaults.CategoryBase.Indexes.Serials);
    var typeBook = @((int) Defaults.CategoryBase.Indexes.Books);
    var typeRoad = @((int) Defaults.CategoryBase.Indexes.Roads);
    var typeEvent = @((int) Defaults.CategoryBase.Indexes.Events);
    var typeImprovement = @((int) Defaults.CategoryBase.IndexesExt.Improvements);
    var typeUser = @((int) Defaults.CategoryBase.IndexesExt.Users);
    var typeLog = @((int) Defaults.CategoryBase.IndexesExt.Logs);
    var typeError = @((int) Defaults.CategoryBase.IndexesExt.Errors);
    var typeSetting = @((int) Defaults.CategoryBase.IndexesExt.Settings);

    function Film() {
        this.data = ko.observableArray([]);

        this.load = function(data) {
            var mapped = $.map(data.Data, function(item) { return new FilmElement(item) });
            if (this.data().length > 0) {
                this.data.push.apply(this.data, mapped);
            } else {
                this.data(mapped);
            }
        };
        this.reset = function() {
            this.data.removeAll();
        }
    }

    function FilmElement(data) {
        this.id = ko.observable(data.Id);
        this.shared = ko.observable(data.Shared);
        this.name = ko.observable(data.Name);
        this.year = ko.observable(data.YearText);
        this.seen = ko.observable(data.DateSeeText);
        this.genre = ko.observable(data.GenreText);
        this.rating = ko.observable(data.RatingText);
        this.ratingVal = ko.observable(data.Rating);
        this.genreVal = ko.observable(data.Genre);
    }

    function Serial() {
        this.data = ko.observableArray([]);

        this.load = function(data) {
            var mapped = $.map(data.Data, function(item) { return new SerialElement(item) });
            if (this.data().length > 0) {
                this.data.push.apply(this.data, mapped);
            } else {
                this.data(mapped);
            }
        };
        this.reset = function() {
            this.data.removeAll();
        }
    }

    function SerialElement(data) {
        this.id = ko.observable(data.Id);
        this.shared = ko.observable(data.Shared);
        this.name = ko.observable(data.Name);
        this.year = ko.observable(data.YearText);
        this.season = ko.observable(data.SeasonSeries);
        this.dateLast = ko.observable(data.DateLastText);
        this.dateBegin = ko.observable(data.DateBeginText);
        this.genre = ko.observable(data.GenreText);
        this.rating = ko.observable(data.RatingText);
        this.seasonVal = ko.observable(data.LastSeason);
        this.seriesVal = ko.observable(data.LastSeries);
        this.ratingVal = ko.observable(data.Rating);
        this.genreVal = ko.observable(data.Genre);
    }

    function Book() {
        this.data = ko.observableArray([]);

        this.load = function(data) {
            var mapped = $.map(data.Data, function(item) { return new BookElement(item) });
            if (this.data().length > 0) {
                this.data.push.apply(this.data, mapped);
            } else {
                this.data(mapped);
            }
        };
        this.reset = function() {
            this.data.removeAll();
        }
    }

    function BookElement(data) {
        this.id = ko.observable(data.Id);
        this.shared = ko.observable(data.Shared);
        this.name = ko.observable(data.Name);
        this.year = ko.observable(data.YearText);
        this.authors = ko.observable(data.Authors);
        this.dateRead = ko.observable(data.DateReadText);
        this.genre = ko.observable(data.GenreText);
        this.rating = ko.observable(data.RatingText);
        this.ratingVal = ko.observable(data.Rating);
        this.genreVal = ko.observable(data.Genre);
    }

    function Event() {
        this.data = ko.observableArray([]);

        var eventsInterval;
        this.load = function(data) {
            var mapped = $.map(data.Data, function(item) { return new EventElement(item) });
            if (this.data().length > 0) {
                this.data.push.apply(this.data, mapped);
            } else {
                this.data(mapped);
            }

            eventsInterval = setInterval(this.recalcEstimated.bind(this), 1000); //.bind(this)
        };
        this.reset = function() {
            this.data.removeAll();
            clearInterval(eventsInterval);
        }
        this.recalcEstimated = function() {
            //console.log("recalcEstimated events=", this.data());
            if (this.data().length > 0) {

                for (var i = 0; i < this.data().length; i++) {

                    if (this.data()[i].estimatedTo() === '@Resource.Ready') continue;

                    //console.log("EstimatedTo=", this.data()[i].estimatedTo());
                    var estimatedTo = this.data()[i].estimatedTo();

                    var years = 0;
                    var days = 0;
                    var hours = 0;
                    var minutes = 0;
                    var seconds = 0;

                    var isMinus = false;
                    if (estimatedTo[0] === '-') { //Накапливаем
                        isMinus = true;
                        estimatedTo = estimatedTo.slice(2);
                    }

                    //console.log("имею строку=", estimatedTo);
                    //console.log("формат=", estimatedTo.split(":").length);


                    //1 есть секунды
                    //2 есть и минуты
                    //3 есть и часы
                    //4 есть и дни
                    //5 есть и год

                    if (estimatedTo.split(":").length === 5) {
                        years = estimatedTo.split(":")[0];
                        days = estimatedTo.split(":")[1];
                        hours = estimatedTo.split(":")[2];
                        minutes = estimatedTo.split(":")[3];
                        seconds = estimatedTo.split(":")[4];
                    }
                    if (estimatedTo.split(":").length === 4) {
                        days = estimatedTo.split(":")[0];
                        hours = estimatedTo.split(":")[1];
                        minutes = estimatedTo.split(":")[2];
                        seconds = estimatedTo.split(":")[3];
                    }
                    if (estimatedTo.split(":").length === 3) {
                        hours = estimatedTo.split(":")[0];
                        minutes = estimatedTo.split(":")[1];
                        seconds = estimatedTo.split(":")[2];
                    }
                    if (estimatedTo.split(":").length === 2) {
                        minutes = estimatedTo.split(":")[0];
                        seconds = estimatedTo.split(":")[1];
                    }
                    if (estimatedTo.split(":").length === 1) {
                        seconds = estimatedTo.split(":")[0];
                    }

                    //console.log(years+":"+days + ":" + hours + ":" + minutes + ":" + seconds);
                    if (years === 0 && days === 0 && hours === 0 && minutes === 0 && (seconds === 0 || seconds === '00')) {
                        this.data()[i].estimatedTo('@Resource.Ready');
                    } else {
                        if (isMinus) {
                            seconds++;
                        } else {
                            seconds--;
                        }

                        //скорректировать
                        //60 сек => 0 сек +1 мин
                        if (seconds >= 60) {
                            seconds -= 60;
                            minutes++;
                        }
                        if (seconds < 0) {
                            seconds = 59;
                            minutes--;
                        }

                        if (minutes >= 60) {
                            minutes -= 60;
                            hours++;
                        }
                        if (minutes < 0) {
                            minutes = 59;
                            hours--;
                        }

                        if (hours >= 24) {
                            hours -= 24;
                            days++;
                        }
                        if (hours < 0) {
                            hours = 23;
                            days--;
                        }

                        if (days >= 365) {
                            days -= 365;
                            years++;
                        }

                        this.data()[i].estimatedTo(
                            (isMinus === true ? "- " : "")
                            + (years === 0 ? "" : (years + ":"))
                            + (years === 0 && days === 0 ? "" : (days + ":"))
                            + (years === 0 && days === 0 && hours === 0 ? "" : (hours.toString().length < 2 ? ("0" + hours + ":") : (hours + ":")))
                            + (years === 0 && days === 0 && hours === 0 && minutes === 0 ? "" : (minutes.toString().length < 2 ? ("0" + minutes + ":") : (minutes + ":")))
                            + (seconds < 10 ? "0" + seconds : seconds)
                        );
                    }
                }
            }
        };
    }

    function EventElement(data) {
        this.id = ko.observable(data.Id);
        this.shared = ko.observable(data.Shared);
        this.name = ko.observable(data.Name);
        this.estimatedTo = ko.observable(data.EstimatedTo);
        this.dateTo = ko.observable(data.DateToText);
        this.dayOfWeekTo = ko.observable(data.DayOfWeekTo);
        this.repeatType = ko.observable(data.RepeatType);
        this.date = ko.observable(data.DateText);
        this.haveHistory = ko.observable(data.HaveHistory);
        this.estimatedLast = ko.observable(data.EstimatedLast);
        this.dateLast = ko.observable(data.DateLastText);
        this.dayOfWeekLast = ko.observable(data.DayOfWeekLast);
    }

    function Road() {

        this.dataFoot = ko.observableArray([]);
        this.dataBike = ko.observableArray([]);
        this.dataCar = ko.observableArray([]);
        this.yearsList = ko.observableArray([]);
        this.selectedYear = ko.observable();

        this.haveData = ko.computed(function() { return this.dataFoot().length > 0 || this.dataBike().length > 0 || this.dataCar().length > 0 }, this);
        this.mainTabFoot = ko.computed(function() { return this.dataFoot().length > 0 || (this.dataFoot().length <= 0 && this.dataBike().length <= 0 && this.dataCar().length <= 0); }, this);
        this.mainTabBike = ko.computed(function() { return this.dataFoot().length <= 0 && this.dataBike().length > 0; }, this);
        this.mainTabCar = ko.computed(function() { return this.dataFoot().length <= 0 && this.dataBike().length <= 0 && this.dataCar().length > 0; }, this);

        /*
        this.selectedYear.subscribe(function(newValue) {
            $.post('/Home/ChangeCookiesRoads/', { selected: newValue }, function() {
                window.getPage(); //Запрос на сервер
            }, "json");
        });
        */

        this.load = function(data) {
            this.dataFoot($.map(data.DataFoot, function(item) { return new RoadElement(item) }));
            this.dataBike($.map(data.DataBike, function(item) { return new RoadElement(item) }));
            this.dataCar($.map(data.DataCar, function(item) { return new RoadElement(item) }));
            this.yearsList($.map(data.YearsList, function(item) { return new SelectList(item); }));
            this.selectedYear(data.YearsSelected);
        };
        this.reset = function() {
            this.dataFoot.removeAll();
            this.dataBike.removeAll();
            this.dataCar.removeAll();
            this.yearsList.removeAll();
        };
    }

    function RoadElement(data) {
        this.id = ko.observable(data.Id);
        this.name = ko.observable(data.Name);
        this.date = ko.observable(data.DateText);
        this.distance = ko.observable(data.DistanceText);
        this.shared = ko.observable(data.ShareKey);
        this.dateFull = ko.observable(data.DateFullText);
        this.coordinates = ko.observable(data.Coordinates);
        this.type = ko.observable(data.Type);
    }

    function SelectList(data) {
        this.text = ko.observable(data.Text);
        this.value = ko.observable(data.Value);
        this.selected = ko.observable(data.Selected);
    }

    function Pagination() {
        this.data = ko.observableArray([]);

        this.currentPage = ko.observable();
        this.middlePage = ko.observable();
        this.lastPage = ko.observable();

        this.isFirstPage = ko.observable();
        this.isMiddlePage = ko.observable();
        this.isLastPage = ko.observable();

        this.needVisible = ko.computed(function() { return !(this.isFirstPage() && this.isLastPage()) }, this);

        this.isFirstPage(true);
        this.isLastPage(true);

        this.load = function(data) {

            if (!data.Pages) {
                this.reset();
                return;
            }

            var last = 0;
            var index = 0;
            this.data($.map(data.Pages.List, function(item) {
                var result = item !== (last + 1);
                //console.log("1last="+last+" item="+item+" result="+result);
                index++;
                last = item;
                return new PaginationElement(item, data.Pages.CurentPage, result);
            }));

            this.currentPage(data.Pages.CurentPage);
            this.middlePage(data.Pages.MiddlePage);
            this.lastPage(data.Pages.LastPage);
            this.isFirstPage(data.Pages.IsFirstPage);
            this.isMiddlePage(data.Pages.IsMiddlePage);
            this.isLastPage(data.Pages.IsLastPage);
        };
        this.reset = function() {
            this.data.removeAll();
            this.isFirstPage(true);
            this.isLastPage(true);
        }
    }

    function PaginationElement(data, current, prevSkip) {
        this.id = ko.observable(data);
        this.current = ko.computed(function() { return data === current; }, this);
        this.prevSkip = ko.observable(prevSkip);
    }

    function Setting() {
        this.langList = ko.observableArray([]);
        this.lang = ko.observable();
        this.rppList = ko.observableArray([]);
        this.rpp = ko.observable();
        this.markersOnRoadsList = ko.observableArray([]);
        this.markers = ko.observable();
        this.vkServiceEnabledList = ko.observableArray([]);
        this.vkServiceEnabledInt = ko.observable();
        this.googleServiceEnabledList = ko.observableArray([]);
        this.googleServiceEnabledInt = ko.observable();
        this.facebookServiceEnabledList = ko.observableArray([]);
        this.facebookServiceEnabledInt = ko.observable();
        this.hasPassword = ko.observable();
        this.countLogins = ko.observable();

        this.load = function(data) {
            this.hasPassword = ko.observable(data.HasPassword);
            this.countLogins = ko.observable(data.CountLogins);

            this.langList($.map(data.LangList, function(item) { return new SelectList(item); }));
            this.lang(data.Lang);
            this.rppList($.map(data.RppList, function(item) { return new SelectList(item); }));
            this.rpp(data.Rpp);
            this.markersOnRoadsList($.map(data.MarkersOnRoadsList, function(item) { return new SelectList(item); }));
            this.markers(data.Markers);
            this.vkServiceEnabledList($.map(data.VkServiceEnabledList, function(item) { return new SelectList(item); }));
            this.vkServiceEnabledInt(data.VkServiceEnabledInt);
            this.googleServiceEnabledList($.map(data.GoogleServiceEnabledList, function(item) { return new SelectList(item); }));
            this.googleServiceEnabledInt(data.GoogleServiceEnabledInt);
            this.facebookServiceEnabledList($.map(data.FacebookServiceEnabledList, function(item) { return new SelectList(item); }));
            this.facebookServiceEnabledInt(data.FacebookServiceEnabledInt);
        };
        this.reset = function() {

        }
    }

    function Improvement() {
        this.data = ko.observableArray([]);

        this.load = function(data) {
            var mapped = $.map(data.Data, function(item) { return new ImprovementElement(item) });
            if (this.data().length > 0) {
                this.data.push.apply(this.data, mapped);
            } else {
                this.data(mapped);
            }
        };
        this.reset = function() {
            this.data.removeAll();
        }
    }

    function ImprovementElement(data) {

        this.userName = ko.observable(data.UserName);
        this.complex = ko.observable(data.ComplexText);
        this.dateFound = ko.observable(data.DateFoundText);
        this.text = ko.observable(data.Text);
        this.dateEnd = ko.observable(data.DateEndText);
        this.version = ko.observable(data.VersionText);
        this.textEnd = ko.observable(data.TextEnd);
        this.id = ko.observable(data.Id);
        this.ended = ko.observable(data.Ended);
    }

    function User() {
        this.data = ko.observableArray([]);

        this.load = function(data) {
            var mapped = $.map(data.Data, function(item) { return new UserElement(item) });
            if (this.data().length > 0) {
                this.data.push.apply(this.data, mapped);
            } else {
                this.data(mapped);
            }
        };
        this.reset = function() {
            this.data.removeAll();
        }
    }

    function UserElement(data) {
        this.name = ko.observable(data.Name);
        this.registerDate = ko.observable(data.RegisterDate);
        this.lastAction = ko.observable(data.LastActionText);
        this.culture = ko.observable(data.Culture);
        this.filmsCount = ko.observable(data.FilmsCount);
        this.serialsCount = ko.observable(data.SerialsCount);
        this.booksCount = ko.observable(data.BooksCount);
        this.tracksCount = ko.observable(data.TracksCount);
        this.eventsCount = ko.observable(data.EventsCount);
    }

    function Log() {
        this.data = ko.observableArray([]);

        this.load = function(data) {
            var mapped = $.map(data.Data, function(item) { return new LogElement(item) });
            if (this.data().length > 0) {
                this.data.push.apply(this.data, mapped);
            } else {
                this.data(mapped);
            }
        };
        this.reset = function() {
            this.data.removeAll();
        }
    }

    function LogElement(data) {
        this.userName = ko.observable(data.UserName);
        this.userAgent = ko.observable(data.UserAgent);
        this.ipAdress = ko.observable(data.IPAdress);
        this.dateFirst = ko.observable(data.DateFirstText);
        this.dateLast = ko.observable(data.DateLastText);
        this.count = ko.observable(data.Count);
        this.pageName = ko.observable(data.PageName);
        this.addData = ko.observableArray(data.AddDataText);
    }

    function Error() {
        this.data = ko.observableArray([]);

        this.load = function(data) {
            var mapped = $.map(data.Data, function(item) { return new ErrorElement(item) });
            if (this.data().length > 0) {
                this.data.push.apply(this.data, mapped);
            } else {
                this.data(mapped);
            }
        };
        this.reset = function() {
            this.data.removeAll();
        }
    }

    function ErrorElement(data) {
        this.id = ko.observable(data.Id);
        this.dateTimeStamp = ko.observable(data.DateTimeStampText);
        this.host = ko.observable(data.Host);
        this.type = ko.observable(data.Type);
        this.message = ko.observable(data.Message);
        this.level = ko.observable(data.Level);
        this.stackTrace = ko.observable(data.StackTrace);
        this.variables = ko.observable(data.Variables);
    }

    function ModalWindow() {
        this.title = ko.observable();

        this.modalVisible = ko.observable(false);

        this.modalFieldName = ko.observable();
        this.modalFieldYear = ko.observable();
        this.modalFieldAuthor = ko.observable();
        this.modalFieldSeason = ko.observable();
        this.modalFieldSeries = ko.observable();
        this.modalFieldDateTime = ko.observable();
        this.modalFieldGenre = ko.observable();
        this.modalFieldRating = ko.observable();
        this.modalFieldEventType = ko.observable();
        this.modalFieldRoadType = ko.observable();
        this.modalFieldRoadCoordinates = ko.observable();
        this.modalFieldImprovementDescription = ko.observable();
        this.modalFieldImprovementComplex = ko.observable();

        this.modalTextRecorId = ko.observable();
        this.modalTextName = ko.observable();
        this.modalTextYear = ko.observable();
        this.modalTextAuthor = ko.observable();
        this.modalTextSeason = ko.observable();
        this.modalTextSeries = ko.observable();
        this.modalTextDateTime = ko.observable();
        this.genreList = ko.observableArray([]);
        this.modalTextGenre = ko.observable();
        this.ratingList = ko.observableArray([]);
        this.modalTextRating = ko.observable();
        this.eventTypeList = ko.observableArray([]);
        this.modalTextEventType = ko.observable();
        this.roadTypeList = ko.observableArray([]);
        this.modalTextRoadType = ko.observable();
        this.modalTextRoadCoordinates = ko.observable();
        this.modalTextImprovementDescription = ko.observable();
        this.improvementTypeList = ko.observableArray([]);
        this.modalTextImprovementType = ko.observable();


        this.modalButtonShare = ko.observable();
        this.modalButtonDelete = ko.observable();
        this.modalButtonSave = ko.observable();
        this.modalButtonAdd = ko.observable();

        this.prepareForEdit = function(page) {
            if (page === typeFilm) {
                this.title('@Resource.Edit @Resource.Film');
            } else if (page === typeSerial) {
                this.title('@Resource.Edit @Resource.Serial');
            } else if (page === typeBook) {
                this.title('@Resource.Edit @Resource.Book');
            } else if (page === typeEvent) {
                this.title('@Resource.Edit @Resource.Event');
            } else if (page === typeRoad) {
                this.title('@Resource.Edit @Resource.Road2');
            } else if (page === typeImprovement) {
                this.title('@Resource.Edit @Resource.Improvement');
            }
            this.modalButtonShare(true);
            this.modalButtonDelete(true);
            this.modalButtonSave(true);
            this.modalButtonAdd(false);
            this.modalTextRecorId(-1);
        };
        this.prepareForAdd = function(page) {
            console.log(page);
            if (page === typeFilm) {
                this.title('@Resource.Add @Resource.Film');
            } else if (page === typeSerial) {
                this.title('@Resource.Add @Resource.Serial');
            } else if (page === typeBook) {
                this.title('@Resource.Add @Resource.Book');
            } else if (page === typeEvent) {
                this.title('@Resource.Add @Resource.Event');
            } else if (page === typeRoad) {
                this.title('@Resource.Add @Resource.Road2');
            } else if (page === typeImprovement) {
                this.title('@Resource.Add @Resource.Improvement');
            }

            this.modalTextName('');
            this.modalTextYear(@DateTime.Now.Year);
            this.modalTextAuthor('');
            this.modalTextSeason('1');
            this.modalTextSeries('1');
            $('#modalFieldDateTime').val('');
            this.modalTextRoadCoordinates('');

            this.modalButtonShare(false);
            this.modalButtonDelete(false);
            this.modalButtonSave(false);
            this.modalButtonAdd(true);
            this.modalTextRecorId(-1);
        };
        this.prepareFor = function(page) {
            if (page === typeFilm) {

                this.modalFieldName(true);
                this.modalFieldYear(true);
                this.modalFieldAuthor(false);
                this.modalFieldSeason(false);
                this.modalFieldSeries(false);
                this.modalFieldDateTime(true);
                this.modalFieldGenre(true);
                this.modalFieldRating(true);
                this.modalFieldEventType(false);
                this.modalFieldRoadType(false);
                this.modalFieldRoadCoordinates(false);
                this.modalFieldImprovementDescription(false);
                this.modalFieldImprovementComplex(false);

            } else if (page === typeSerial) {

                this.modalFieldName(true);
                this.modalFieldYear(true);
                this.modalFieldAuthor(false);
                this.modalFieldSeason(true);
                this.modalFieldSeries(true);
                this.modalFieldDateTime(true);
                this.modalFieldGenre(true);
                this.modalFieldRating(true);
                this.modalFieldEventType(false);
                this.modalFieldRoadType(false);
                this.modalFieldRoadCoordinates(false);
                this.modalFieldImprovementDescription(false);
                this.modalFieldImprovementComplex(false);

            } else if (page === typeBook) {

                this.modalFieldName(true);
                this.modalFieldYear(true);
                this.modalFieldAuthor(true);
                this.modalFieldSeason(false);
                this.modalFieldSeries(false);
                this.modalFieldDateTime(true);
                this.modalFieldGenre(true);
                this.modalFieldRating(true);
                this.modalFieldEventType(false);
                this.modalFieldRoadType(false);
                this.modalFieldRoadCoordinates(false);
                this.modalFieldImprovementDescription(false);
                this.modalFieldImprovementComplex(false);

            } else if (page === typeEvent) {

                this.modalFieldName(true);
                this.modalFieldYear(false);
                this.modalFieldAuthor(false);
                this.modalFieldSeason(false);
                this.modalFieldSeries(false);
                this.modalFieldDateTime(true);
                this.modalFieldGenre(false);
                this.modalFieldRating(false);
                this.modalFieldEventType(true);
                this.modalFieldRoadType(false);
                this.modalFieldRoadCoordinates(false);
                this.modalFieldImprovementDescription(false);
                this.modalFieldImprovementComplex(false);

            } else if (page === typeRoad) {

                this.modalFieldName(true);
                this.modalFieldYear(false);
                this.modalFieldAuthor(false);
                this.modalFieldSeason(false);
                this.modalFieldSeries(false);
                this.modalFieldDateTime(true);
                this.modalFieldGenre(false);
                this.modalFieldRating(false);
                this.modalFieldEventType(false);
                this.modalFieldRoadType(true);
                this.modalFieldRoadCoordinates(true);
                this.modalFieldImprovementDescription(false);
                this.modalFieldImprovementComplex(false);

            } else if (page === typeImprovement) {

                this.modalFieldName(false);
                this.modalFieldYear(false);
                this.modalFieldAuthor(false);
                this.modalFieldSeason(false);
                this.modalFieldSeries(false);
                this.modalFieldDateTime(false);
                this.modalFieldGenre(false);
                this.modalFieldRating(false);
                this.modalFieldEventType(false);
                this.modalFieldRoadType(false);
                this.modalFieldRoadCoordinates(false);
                this.modalFieldImprovementDescription(true);
                this.modalFieldImprovementComplex(true);

            }
        };
    }

    function ModalWindowShare() {
        this.modalVisible = ko.observable(false);

        this.modalFieldLoading = ko.observable(false);

        this.modalTextRecorId = ko.observable();
        this.modalTextLink = ko.observable();

        this.modalButtonTry = ko.observable();
        this.modalButtonGet = ko.observable();
        this.modalButtonDelete = ko.observable();
    }

    function ModalWindowLogin() {
        this.modalVisible = ko.observable(false);
    }

    function ModalWindowLoginExternal() {
        this.modalVisible = ko.observable(false);
    }


    function PreparedData() {

        this.eventSelectList = ko.observableArray([]);
        this.eventSelect = ko.observable();

        this.improvementSelectList = ko.observableArray([]);
        this.improvementSelect = ko.observable();
    };

    function IndexViewModel() {
        var self = this;

        self.currentPage = ko.observable();
        self.currentPage.subscribe(function(previousValue) {
            self.reset(previousValue);
        }, this, "beforeChange");
        self.currentPage.subscribe(function(newValue) {
            self.modalWindow().prepareFor(newValue);
        });

        self.Film = ko.observable(new Film());
        self.Serial = ko.observable(new Serial());
        self.Book = ko.observable(new Book());
        self.Event = ko.observable(new Event());
        self.Road = ko.observable(new Road());
        self.Pagination = ko.observable(new Pagination());

        self.Improvement = ko.observable(new Improvement());
        self.User = ko.observable(new User());
        self.Log = ko.observable(new Log());
        self.Error = ko.observable(new Error());
        self.Setting = ko.observable(new Setting());


        self.modalWindow = ko.observable(new ModalWindow());
        self.modalWindowShare = ko.observable(new ModalWindowShare());
        self.modalWindowLogin = ko.observable(new ModalWindowLogin());
        self.modalWindowLoginExternal = ko.observable(new ModalWindowLoginExternal());

        self.preparedData = ko.observable(new PreparedData());

        self.pageNeedGetPage = ko.computed(function() {
            return self.currentPage() === typeFilm || self.currentPage() === typeSerial || self.currentPage() === typeBook
                || self.currentPage() === typeEvent || self.currentPage() === typeRoad || self.currentPage() === typeImprovement || self.currentPage() === typeUser
                || self.currentPage() === typeLog || self.currentPage() === typeError || self.currentPage() === typeSetting;
        }, this);
        self.pageCanAdd = ko.computed(function() {
            return self.currentPage() === typeFilm || self.currentPage() === typeSerial || self.currentPage() === typeBook
                || self.currentPage() === typeEvent || self.currentPage() === typeRoad || self.currentPage() === typeImprovement;
        }, this);
        self.pageCanSearch = ko.computed(function() {
            return false;
        }, this);


        self.load = function(data) {
            if (self.currentPage() === typeFilm) {
                self.Film().load(data);
            } else if (self.currentPage() === typeSerial) {
                self.Serial().load(data);
            } else if (self.currentPage() === typeBook) {
                self.Book().load(data);
            } else if (self.currentPage() === typeEvent) {
                self.Event().load(data);
            } else if (self.currentPage() === typeRoad) {
                self.Road().load(data);
            } else if (self.currentPage() === typeImprovement) {
                self.Improvement().load(data);
            } else if (self.currentPage() === typeUser) {
                self.User().load(data);
            } else if (self.currentPage() === typeLog) {
                self.Log().load(data);
            } else if (self.currentPage() === typeError) {
                self.Error().load(data);
            } else if (self.currentPage() === typeSetting) {
                self.Setting().load(data);
            }
            self.Pagination().load(data);
            self.dataLoading(false);
        };

        self.reset = function(previousValue) {
            if (previousValue === typeFilm) {
                self.Film().reset();
            } else if (previousValue === typeSerial) {
                self.Serial().reset();
            } else if (previousValue === typeBook) {
                self.Book().reset();
            } else if (previousValue === typeEvent) {
                self.Event().reset();
            } else if (previousValue === typeRoad) {
                self.Road().reset();
            } else if (previousValue === typeImprovement) {
                self.Improvement().reset();
            } else if (previousValue === typeUser) {
                self.User().reset();
            } else if (previousValue === typeLog) {
                self.Log().reset();
            } else if (previousValue === typeError) {
                self.Error().reset();
            } else if (previousValue === typeSetting) {
                self.Setting().reset();
            }
            self.Pagination().reset();
        };


        self.dataLoading = ko.observable();
        self.setLoadingData = function() {
            self.dataLoading(true);
        };


        self.changePage = function(newPage) {
            if (self.currentPage() !== newPage) {
                self.currentPage(newPage);
                if (self.pageNeedGetPage()) self.GetPage();
            }
        };
        self.getNewPaginationPage = function(pageNum, reloadData) {
            //console.log("changePage=",pageNum);
            var data = { page: pageNum };
            self.GetPage(data, reloadData);
        };

        self.GetPage = function(inData, resetModel, saveCurrentPage) {

            if (resetModel)self.reset(self.currentPage());
            self.setLoadingData();

            var data = { pageId: self.currentPage() };
            if (inData)$.extend(data, inData);
            if (saveCurrentPage) {
                if (self.Pagination) {
                    var pageNum = { page: self.Pagination().currentPage() };
                    $.extend(data, pageNum);
                }
            }
            console.log(data);

            $.post('/Json/GetPage/', data, function(jsonData) {

                if (jsonData === '@Auth.NoAuth') window.location = '/';

                self.load(jsonData);

            }, "json");
        };

        $.post('/Json/GetPreparedPage/', {}, function(jsonData) {
            self.modalWindow().genreList($.map(jsonData.RatinngGenre.GenreList, function(item) { return new SelectList(item); }));
            self.modalWindow().ratingList($.map(jsonData.RatinngGenre.RatingList, function(item) { return new SelectList(item); }));
            self.modalWindow().eventTypeList($.map(jsonData.EventTypeList, function(item) { return new SelectList(item); }));
            self.modalWindow().roadTypeList($.map(jsonData.RoadTypeList, function(item) { return new SelectList(item); }));
            self.modalWindow().improvementTypeList($.map(jsonData.ImprovementTypeList, function(item) { return new SelectList(item); }));

            self.preparedData().eventSelectList($.map(jsonData.EventSelectListEvents, function(item) { return new SelectList(item); }));
            self.preparedData().improvementSelectList($.map(jsonData.ImprovementTypeList, function(item) { return new SelectList(item); }));
        }, "json");

        self.AddData = function() {

            if (self.pageCanAdd()) {
                var data = {};

                if (self.currentPage() === typeFilm) {
                    data = {
                        pageId: self.currentPage(),
                        name: self.modalWindow().modalTextName(),
                        year: self.modalWindow().modalTextYear(),
                        datetime: $('#modalFieldDateTime').val(),
                        genre: self.modalWindow().modalTextGenre(),
                        rating: self.modalWindow().modalTextRating()
                    };
                } else if (self.currentPage() === typeSerial) {
                    data = {
                        pageId: self.currentPage(),
                        name: self.modalWindow().modalTextName(),
                        year: self.modalWindow().modalTextYear(),
                        datetime: $('#modalFieldDateTime').val(),
                        genre: self.modalWindow().modalTextGenre(),
                        rating: self.modalWindow().modalTextRating(),
                        season: self.modalWindow().modalTextSeason(),
                        series: self.modalWindow().modalTextSeries()
                    };
                } else if (self.currentPage() === typeBook) {
                    data = {
                        pageId: self.currentPage(),
                        name: self.modalWindow().modalTextName(),
                        year: self.modalWindow().modalTextYear(),
                        datetime: $('#modalFieldDateTime').val(),
                        genre: self.modalWindow().modalTextGenre(),
                        rating: self.modalWindow().modalTextRating(),
                        authors: self.modalWindow().modalTextAuthor()
                    };
                } else if (self.currentPage() === typeRoad) {
                    data = {
                        pageId: self.currentPage(),
                        name: self.modalWindow().modalTextName(),
                        datetime: $('#modalFieldDateTime').val(),
                        type: self.modalWindow().modalTextRoadType(),
                        coordinates: self.modalWindow().modalTextRoadCoordinates(),
                        distance: CalcDistanceFromTxt(self.modalWindow().modalTextRoadCoordinates())
                    };
                } else if (self.currentPage() === typeEvent) {
                    data = {
                        pageId: self.currentPage(),
                        name: self.modalWindow().modalTextName(),
                        datetime: $('#modalFieldDateTime').val(),
                        type: self.modalWindow().modalTextEventType()
                    };
                } else if (self.currentPage() === typeImprovement) {
                    data = {
                        pageId: self.currentPage(),
                        desc: self.modalWindow().modalTextImprovementDescription(),
                        complex: self.modalWindow().modalTextImprovementType()
                    };
                }

                $.post('/Json/AddData/', data, function(jsonData) {
                    console.log(jsonData);
                    if (jsonData.error) {
                        alert(jsonData.error);
                    } else {
                        self.GetPage({}, true);
                        $('#ModalWindow').modal('hide');
                    }
                }, "json");
            }
        };
        self.EditData = function(recordIndex, roadType) {
            //console.log("EditData recordIndex=", recordIndex, "roadType=", roadType, "currentPage", self.currentPage());
            if (self.pageCanAdd()) {
                self.modalWindow().prepareForEdit(self.currentPage());

                if (self.currentPage() === typeFilm) {
                    self.modalWindow().modalTextRecorId(self.Film().data()[recordIndex].id());
                    self.modalWindow().modalTextName(self.Film().data()[recordIndex].name());
                    self.modalWindow().modalTextYear(self.Film().data()[recordIndex].year());
                    self.modalWindow().modalTextDateTime(self.Film().data()[recordIndex].seen());
                    self.modalWindow().modalTextGenre(self.Film().data()[recordIndex].genreVal());
                    self.modalWindow().modalTextRating(self.Film().data()[recordIndex].ratingVal());
                } else if (self.currentPage() === typeSerial) {
                    self.modalWindow().modalTextRecorId(self.Serial().data()[recordIndex].id());
                    self.modalWindow().modalTextName(self.Serial().data()[recordIndex].name());
                    self.modalWindow().modalTextYear(self.Serial().data()[recordIndex].year());
                    self.modalWindow().modalTextSeason(self.Serial().data()[recordIndex].seasonVal());
                    self.modalWindow().modalTextSeries(self.Serial().data()[recordIndex].seriesVal());
                    self.modalWindow().modalTextDateTime(self.Serial().data()[recordIndex].dateBegin());
                    self.modalWindow().modalTextGenre(self.Serial().data()[recordIndex].genreVal());
                    self.modalWindow().modalTextRating(self.Serial().data()[recordIndex].ratingVal());
                } else if (self.currentPage() === typeBook) {
                    self.modalWindow().modalTextRecorId(self.Book().data()[recordIndex].id());
                    self.modalWindow().modalTextName(self.Book().data()[recordIndex].name());
                    self.modalWindow().modalTextYear(self.Book().data()[recordIndex].year());
                    self.modalWindow().modalTextAuthor(self.Book().data()[recordIndex].authors());
                    self.modalWindow().modalTextDateTime(self.Book().data()[recordIndex].dateRead());
                    self.modalWindow().modalTextGenre(self.Book().data()[recordIndex].genreVal());
                    self.modalWindow().modalTextRating(self.Book().data()[recordIndex].ratingVal());
                } else if (self.currentPage() === typeEvent) {
                    self.modalWindow().modalTextRecorId(self.Event().data()[recordIndex].id());
                    self.modalWindow().modalTextName(self.Event().data()[recordIndex].name());
                    self.modalWindow().modalTextDateTime(self.Event().data()[recordIndex].date());
                    self.modalWindow().modalTextEventType(self.Event().data()[recordIndex].repeatType());
                } else if (self.currentPage() === typeRoad) {
                    if (roadType === 1) {
                        self.modalWindow().modalTextRecorId(self.Road().dataFoot()[recordIndex].id());
                        self.modalWindow().modalTextName(self.Road().dataFoot()[recordIndex].name());
                        self.modalWindow().modalTextDateTime(self.Road().dataFoot()[recordIndex].dateFull());
                        self.modalWindow().modalTextRoadType(self.Road().dataFoot()[recordIndex].type());
                        self.modalWindow().modalTextRoadCoordinates(self.Road().dataFoot()[recordIndex].coordinates());
                    } else if (roadType === 2) {
                        self.modalWindow().modalTextRecorId(self.Road().dataCar()[recordIndex].id());
                        self.modalWindow().modalTextName(self.Road().dataCar()[recordIndex].name());
                        self.modalWindow().modalTextDateTime(self.Road().dataCar()[recordIndex].dateFull());
                        self.modalWindow().modalTextRoadType(self.Road().dataCar()[recordIndex].type());
                        self.modalWindow().modalTextRoadCoordinates(self.Road().dataCar()[recordIndex].coordinates());
                    } else if (roadType === 3) {
                        self.modalWindow().modalTextRecorId(self.Road().dataBike()[recordIndex].id());
                        self.modalWindow().modalTextName(self.Road().dataBike()[recordIndex].name());
                        self.modalWindow().modalTextDateTime(self.Road().dataBike()[recordIndex].dateFull());
                        self.modalWindow().modalTextRoadType(self.Road().dataBike()[recordIndex].type());
                        self.modalWindow().modalTextRoadCoordinates(self.Road().dataBike()[recordIndex].coordinates());
                    }
                }
                self.modalWindow().modalVisible(true);
            }
        };
        self.DeleteData = function() {
            //console.log("DeleteData id=",self.modalWindow().modalTextRecorId());
            var data = {
                pageId: self.currentPage(),
                recorId: self.modalWindow().modalTextRecorId()
            };
            $.post('/Json/DeleteData/', data, function(jsonData) {
                console.log(jsonData);
                if (jsonData.error) {
                    alert(jsonData.error);
                } else {
                    self.GetPage({}, true);
                    $('#ModalWindow').modal('hide');
                }
            }, "json");
        };
        self.SaveData = function() {
            console.log("SaveData id=", self.modalWindow().modalTextRecorId());
            if (self.pageCanAdd()) {
                var data = {};

                if (self.currentPage() === typeFilm) {
                    data = {
                        pageId: self.currentPage(),
                        id: self.modalWindow().modalTextRecorId(),
                        name: self.modalWindow().modalTextName(),
                        year: self.modalWindow().modalTextYear(),
                        datetime: $('#modalFieldDateTime').val(),
                        genre: self.modalWindow().modalTextGenre(),
                        rating: self.modalWindow().modalTextRating()
                    };
                } else if (self.currentPage() === typeSerial) {
                    data = {
                        pageId: self.currentPage(),
                        id: self.modalWindow().modalTextRecorId(),
                        name: self.modalWindow().modalTextName(),
                        year: self.modalWindow().modalTextYear(),
                        datetime: $('#modalFieldDateTime').val(),
                        genre: self.modalWindow().modalTextGenre(),
                        rating: self.modalWindow().modalTextRating(),
                        season: self.modalWindow().modalTextSeason(),
                        series: self.modalWindow().modalTextSeries()
                    };
                } else if (self.currentPage() === typeBook) {
                    data = {
                        pageId: self.currentPage(),
                        id: self.modalWindow().modalTextRecorId(),
                        name: self.modalWindow().modalTextName(),
                        year: self.modalWindow().modalTextYear(),
                        datetime: $('#modalFieldDateTime').val(),
                        genre: self.modalWindow().modalTextGenre(),
                        rating: self.modalWindow().modalTextRating(),
                        authors: self.modalWindow().modalTextAuthor()
                    };
                } else if (self.currentPage() === typeRoad) {
                    data = {
                        pageId: self.currentPage(),
                        id: self.modalWindow().modalTextRecorId(),
                        name: self.modalWindow().modalTextName(),
                        datetime: $('#modalFieldDateTime').val(),
                        type: self.modalWindow().modalTextRoadType(),
                        coordinates: self.modalWindow().modalTextRoadCoordinates(),
                        distance: CalcDistanceFromTxt(self.modalWindow().modalTextRoadCoordinates())
                    };
                } else if (self.currentPage() === typeEvent) {
                    data = {
                        pageId: self.currentPage(),
                        id: self.modalWindow().modalTextRecorId(),
                        name: self.modalWindow().modalTextName(),
                        datetime: $('#modalFieldDateTime').val(),
                        type: self.modalWindow().modalTextEventType()
                    };
                }

                $.post('/Json/UpdateData/', data, function(jsonData) {
                    console.log(jsonData);
                    if (jsonData.error) {
                        alert(jsonData.error);
                    } else {
                        self.GetPage({}, true, true);
                        $('#ModalWindow').modal('hide');
                    }
                }, "json");
            }
        };
        self.ShareData = function(recordId) {
            //console.log("ShareData id=",recordId);
            self.modalWindowShare().modalTextRecorId(recordId);
            self.modalWindowShare().modalVisible(true);

            self.modalWindowShare().modalTextLink('');
            self.modalWindowShare().modalFieldLoading(true);

            self.modalWindowShare().modalButtonGet(false);
            self.modalWindowShare().modalButtonTry(false);
            self.modalWindowShare().modalButtonDelete(false);

            var data = {
                pageId: self.currentPage(),
                recordId: recordId
            };
            $.post('/Json/GetShare/', data, function(jsonData) {

                self.modalWindowShare().modalFieldLoading(false);

                //console.log('GetShare data=', jsonData);
                if (jsonData === '-') {
                    self.modalWindowShare().modalButtonGet(true);
                } else {
                    self.modalWindowShare().modalTextLink(jsonData);
                    self.modalWindowShare().modalButtonTry(true);
                    self.modalWindowShare().modalButtonDelete(true);
                }
            }, "json");
        };
        self.GenerateShare = function() {

            self.modalWindowShare().modalFieldLoading(true);

            var data = {
                pageId: self.currentPage(),
                recordId: self.modalWindowShare().modalTextRecorId()
            };

            $.post('/Json/GenerateShare/', data, function(jsonData) {

                self.modalWindowShare().modalFieldLoading(false);

                //console.log('GetShare data=', jsonData);
                if (jsonData === '-') {
                    self.modalWindowShare().modalButtonGet(true);
                } else {
                    self.modalWindowShare().modalTextLink(jsonData);
                    self.modalWindowShare().modalButtonTry(true);
                    self.modalWindowShare().modalButtonDelete(true);
                    self.modalWindowShare().modalButtonGet(false);

                    //self.modalWindowShare().visible(false);
                    self.GetPage({}, true);
                }
            }, "json");
        };
        self.DeleteShare = function() {

            self.modalWindowShare().modalFieldLoading(true);

            var data = {
                pageId: self.currentPage(),
                recordId: self.modalWindowShare().modalTextRecorId()
            };

            $.post('/Json/DeleteShare/', data, function(jsonData) {

                self.modalWindowShare().modalFieldLoading(false);

                if (jsonData === '-') {
                    self.modalWindowShare().modalTextLink('');
                    self.modalWindowShare().modalButtonGet(true);
                    self.modalWindowShare().modalButtonTry(false);
                    self.modalWindowShare().modalButtonDelete(false);
                    self.GetPage({}, true);
                } else {
                    self.modalWindowShare().modalTextLink(jsonData);
                    self.modalWindowShare().modalButtonTry(true);
                    self.modalWindowShare().modalButtonDelete(true);
                    self.modalWindowShare().modalButtonGet(false);
                }
            }, "json");
        };
        self.TryShare = function() {
            window.open(self.modalWindowShare().modalTextLink(), '_blank');
        };
        self.AddSeries = function(recordIndex) {
            var data = { recordId: self.Serial().data()[recordIndex].id };
            $.post('/Json/AddSeries/', data, function() {
                self.GetPage({}, true);
            }, "json");
        };
    }

    (function($) {
        $(function() {

            var model = new IndexViewModel();

            ko.applyBindings(model);
            initialGmap('@CultureInfoTool.GetCulture()', '@Model.Markers');

            var $datetimepicker = $('#modalFieldDateTime');
            $datetimepicker.datetimepicker({
                //viewMode: 'years',
                locale: '@CultureInfoTool.GetCulture()'
            });


            //test cookies
            /* пока выключу и не буду с ними работать
            var expires = new Date();
            expires.setTime(expires.getTime() + (1 * 24 * 60 * 60 * 1000));//Сутки
            document.cookie = 'TestCookes' + '=' + 'ok' + ';expires=' + expires.toUTCString();
            */


            //login
            var $RememberMe = $("#RememberMe");
            $RememberMe.change(function() {

                if ($RememberMe.val() === "true") {
                    $RememberMe.val("false");
                } else $RememberMe.val("true");
            });

            var url = '';
            var data = {};
            var $LoginButton = $("#LoginButton");
            $LoginButton.off('click');
            $LoginButton.on('click', function() {
                url = '/Account/LoginMain';
                data = {
                    userName: $('#userName').val(),
                    password: $('#password').val(),
                    remember: $('#RememberMe').val()
                };
                window.sendRequest(url, data);

                return false;
            });
            //logout
            var $LogoutButton = $("#LogoutButton");
            $LogoutButton.off('click');
            $LogoutButton.on('click', function() {
                url = '/Account/LogOut';
                data = {};
                window.sendRequest(url, data);

                return false;
            });


            var $modalAbout = $('#ModalWindowAbout');

            var $imageAbout = $("#image");
            $imageAbout.off('click');
            $imageAbout.on('click', function() {
                $modalAbout.modal('hide');
                return false;
            });

            var $samples = $('.div-about-all');
            $samples.off('click', '.myseen-button-mobile-about');
            $samples.on('click', '.myseen-button-mobile-about', function() {
                var $button = $(this);
                var id = $button.attr('id');
                $modalAbout.modal('show');
                $imageAbout.attr("src", "/Content/Images/About/" + "@CultureInfoTool.GetFirst2Culture()" + "/" + id + ".jpg");
                return false;
            });
        });
    })(jQuery);
</script>
</div>
</body>
</html>


можно подтягивтаь разные таблицы запросом ка ктекст, хранящийся отдельно, далее делать бинд или рединд


// get the DOM element
  var element = $('div.searchRestults')[0];
  //call clean node, kind of unbind
  ko.cleanNode(element);
  //apply the binding again
  ko.applyBindings(searchResultViewModel, element);