@model MySeenWeb.Models.HomeViewModelEventsMin

@Scripts.Render("~/bundles/datetimepicker")
@Styles.Render("~/Content/datetimepicker.css")

<div class="form-inline">
    <div class="form-group">
        <div class="container">
            <div class="row col-sm-12">
                <div class="form-group">
                    @Html.DropDownList("Selected", Model.SelectListEvents, new { @class = "form-control", @id = "lstSelectedEvents" })
                </div>
            </div>
        </div>
    </div>
</div>



<div id="divDataEvents">

    <div data-bind="visible: dataLoading " align="center">
        <img src="~/Content/Images/loading_small.gif"/>
    </div>

    <div data-bind="visible: events().length > 0" style="display: none;">

        <div class="table-responsive">
            <table class="table table-striped" id="table">
                <thead>
                <tr>
                    <th class="col-sm-1"></th>
                    <th class="col-sm-2">@Resource.Event</th>
                    <th class="col-sm-2">@Resource.To</th>
                    <th class="col-sm-2">@Resource.When</th>
                    <th class="col-sm-1">@Resource.Day</th>
                    <th style="display: none;"></th>
                    <th style="display: none;"></th>
                    <th>|</th>
                    <th class="col-sm-2">@Resource.Last</th>
                    <th class="col-sm-2">@Resource.When</th>
                    <th class="col-sm-1">@Resource.Day</th>
                </tr>
                </thead>
                <tbody data-bind="foreach: events">
                <tr>
                    <td>
                        <span class="pull-left">
                            <button class="btn btn-warning btn-edit btn-xs" data-bind="attr: {id: id}"> <span class=" glyphicon glyphicon-pencil"></span></button>
                            <button class="btn btn-xs btn-info btn-share" data-bind=" visible: shared, attr: {id: id}"><span class="glyphicon glyphicon-share"></span></button>
                        </span>
                    </td>
                    <td class="align-center" data-bind="text: name"></td>
                    <td class="align-center" data-bind="text: estimatedTo"></td>
                    <td class="align-center" data-bind="text: dateTo"></td>
                    <td class="align-center" data-bind="text: dayOfWeekTo"></td>
                    <td style="display: none;" data-bind="text: repeatType"></td>
                    <td style="display: none;" data-bind="text: date"></td>
                    <td class="align-center">|</td>
                    <!-- ko if: haveHistory -->
                    <td class="align-center" data-bind="text: estimatedLast"></td>
                    <td class="align-center" data-bind="text: dateLast"></td>
                    <td class="align-center" data-bind="text: dayOfWeekLast"></td>
                    <!-- /ko -->
                </tr>
                </tbody>
            </table>
        </div>

        @Html.Partial("../Tools/PaginationKO")

    </div>
</div>

@Html.Partial("Parts/Tools/JsonGetPage")

<div class="modal fade modal-window" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" id="ModalAddWindow">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close myseen-modal-close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title text-center">@Resource.AddNew @Resource.Event</h4>
            </div>
            <div class="modal-body">
                <div class="form-horizontal">
                    <div class="form-group">
                        <label for="eventName" class="col-sm-2 control-label">@Resource.Name</label>
                        <div class="col-sm-10">
                            <input type="text" class="form-control event-name" id="eventName" placeholder="@Resource.Name">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="datetimepicker" class="col-sm-2 control-label">@Resource.When</label>
                        <div class="col-sm-10">
                            <input type="text" class="form-control" id="datetimepicker" placeholder="@DateTime.Now" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-2 control-label">@Resource.Type</label>
                        <div class="col-sm-10">
                            @Html.DropDownList("Type", Model.TypeList, new { @class = "form-control event-type", @id = "eventType" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <div class="align-center row">
                    <button type="button" class="btn btn-info btn-share" id="shareGetInModalButton">
                        <span class="glyphicon glyphicon-plus"></span>
                        &nbsp;@Resource.Share
                    </button>
                    <button type="button" class="btn btn-danger" id="deleteButton" style="display: none;">
                        <span class="glyphicon glyphicon-trash"></span>
                        &nbsp;@Resource.Delete
                    </button>
                    <button type="button" class="btn btn-success" id="saveButton" style="display: none;">
                        <span class="glyphicon glyphicon-ok"></span>
                        &nbsp;@Resource.SaveСhanges
                    </button>
                </div>
                <button type="button" class="btn btn-success btn-block" id="submitAddButton">
                    <span class="glyphicon glyphicon-ok"></span>
                    &nbsp;@Resource.Add
                </button>
            </div>
        </div>
    </div>
</div>

@Html.Partial("Parts/Parts/ModalShare", "events")

<script language="javascript" type="text/javascript">

    function Event(data) {

        this.id = ko.observable(data.Id);
        this.shared = ko.observable(data.Shared);
        this.name = ko.observable(data.Name);
        this.estimatedTo = ko.observable(data.EstimatedTo);
        this.dateTo = ko.observable(data.DateToText);
        this.dayOfWeekTo = ko.observable(data.DayOfWeekTo);
        this.repeatType = ko.observable(data.RepeatType);
        this.date = ko.observable(data.DateText);
        this.haveHistory = ko.observable(data.HaveHistory);
        this.estimatedLast = ko.observable(data.EstimatedLast);
        this.dateLast = ko.observable(data.DateLastText);
        this.dayOfWeekLast = ko.observable(data.DayOfWeekLast);
    }

    function EventsViewModel() {

        var self = this;
        self.events = ko.observableArray([]);
        self.dataLoading = ko.observable();
        self.dataLoading(true);

        self.loadData = function (data) {

            var mapped = $.map(data.Data, function (item) { return new Event(item) });
            if (self.events().length > 0) {
                self.events.push.apply(self.events, mapped);
            } else {
                self.events(mapped);
            }

            window.showPagination(data.Pages);

            self.dataLoading(false);
        };

        self.resetData = function () {
            self.events.removeAll();
        };

        self.setLoadingData = function () {
            self.dataLoading(true);
        };
    }

    var model;

    function showPage(data) {

        model.loadData(data);
    }

    function recalcEstimated() {
        //console.log("recalcEstimated events=", model.events().length);
        if (model.events().length > 0) {

            for (var i = 0; i < model.events().length; i++) {

                if (model.events()[i].estimatedTo() === '@Resource.Ready') continue;

                //console.log("EstimatedTo=", model.events()[i].estimatedTo());
                var estimatedTo = model.events()[i].estimatedTo();

                var years = 0;
                var days = 0;
                var hours = 0;
                var minutes = 0;
                var seconds = 0;

                var isMinus = false;
                if (estimatedTo[0] === '-') { //Накапливаем
                    isMinus = true;
                    estimatedTo = estimatedTo.slice(2);
                }

                //console.log("имею строку=", estimatedTo);
                //console.log("формат=", estimatedTo.split(":").length);


                //1 есть секунды
                //2 есть и минуты
                //3 есть и часы
                //4 есть и дни
                //5 есть и год

                if (estimatedTo.split(":").length === 5) {
                    years = estimatedTo.split(":")[0];
                    days = estimatedTo.split(":")[1];
                    hours = estimatedTo.split(":")[2];
                    minutes = estimatedTo.split(":")[3];
                    seconds = estimatedTo.split(":")[4];
                }
                if (estimatedTo.split(":").length === 4) {
                    days = estimatedTo.split(":")[0];
                    hours = estimatedTo.split(":")[1];
                    minutes = estimatedTo.split(":")[2];
                    seconds = estimatedTo.split(":")[3];
                }
                if (estimatedTo.split(":").length === 3) {
                    hours = estimatedTo.split(":")[0];
                    minutes = estimatedTo.split(":")[1];
                    seconds = estimatedTo.split(":")[2];
                }
                if (estimatedTo.split(":").length === 2) {
                    minutes = estimatedTo.split(":")[0];
                    seconds = estimatedTo.split(":")[1];
                }
                if (estimatedTo.split(":").length === 1) {
                    seconds = estimatedTo.split(":")[0];
                }

                //console.log(years+":"+days + ":" + hours + ":" + minutes + ":" + seconds);
                if (years === 0 && days === 0 && hours === 0 && minutes === 0 && (seconds === 0 || seconds === '00')) {
                    model.events()[i].estimatedTo('@Resource.Ready');
                }
                else {
                    if (isMinus) {
                        seconds++;
                    } else {
                        seconds--;
                    }

                    //скорректировать
                    //60 сек => 0 сек +1 мин
                    if (seconds >= 60) {
                        seconds -= 60;
                        minutes++;
                    }
                    if (seconds < 0) {
                        seconds = 59;
                        minutes--;
                    }

                    if (minutes >= 60) {
                        minutes -= 60;
                        hours++;
                    }
                    if (minutes < 0) {
                        minutes = 59;
                        hours--;
                    }

                    if (hours >= 24) {
                        hours -= 24;
                        days++;
                    }
                    if (hours < 0) {
                        hours = 23;
                        days--;
                    }

                    if (days >= 365) {
                        days -= 365;
                        years++;
                    }

                    model.events()[i].estimatedTo(
                        (isMinus === true ? "- " : "")
                        + (years === 0 ? "" : (years + ":"))
                        + (years === 0 && days === 0 ? "" : (days + ":"))
                        + (years === 0 && days === 0 && hours === 0 ? "" : (hours.toString().length < 2 ? ("0" + hours + ":") : (hours + ":")))
                        + (years === 0 && days === 0 && hours === 0 && minutes === 0 ? "" : (minutes.toString().length < 2 ? ("0" + minutes + ":") : (minutes + ":")))
                        + (seconds < 10 ? "0" + seconds : seconds)
                    );
                }
            }
        }
    }

    (function ($) {
        $(function () {

            model = new EventsViewModel();
            ko.applyBindings(model, document.getElementById('divDataEvents'));

            window.getPage({ page: window.getQueryVar('page'), search: window.getQueryVar('search') }); //Запрос на сервер

            setInterval(recalcEstimated, 1000);

            var $addButton = $('#addButton');
            var $submitAddButton = $('#submitAddButton');
            var $table = $('.table.table-striped');
            var $modal = $('#ModalAddWindow');
            var url = '';
            var data = {};
            var $datetimepicker = $('#datetimepicker');
            $datetimepicker.datetimepicker({
                //viewMode: 'years',
                locale: '@CultureInfoTool.GetCulture()'
            });
            var $shareGetInModalButton = $('#shareGetInModalButton');

            function sendRequest(innerUrl, innerData) {
                $.ajax({
                    type: 'POST',
                    url: innerUrl,
                    data: innerData,
                    dataType: 'json',
                    success: function (response) {
                        if (response.error) {
                            alert(response.error);
                        } else {
                            //window.location.href = window.location.href;
                            var data = { page: $('#pagination-curent-page').val(), search: $('#quickSearch').val() };
                            window.getPage(data); //Запрос на сервер

                            $modal.modal('hide');
                        }
                    },
                    error: function (err) {
                        alert(err);
                    }
                });

                return false;
            }


            var $select = $('#lstSelectedEvents');
            $select.on('change', function () {
                var value = $(this).val();
                var data = { selected: value };
                url = '/Json/ChangeShowEndedEvents';
                sendRequest(url, data);

                return false;
            });

            $addButton.off('click');
            $addButton.on('click', function () {
                $datetimepicker.val('@DateTime.Now');
                $shareGetInModalButton.hide();
                $modal.modal('show');
                return false;
            });

            $submitAddButton.off('click');
            $submitAddButton.on('click', function () {

                url = '/Home/AddEvent';
                data = {
                    name: $('#eventName').val(),
                    datetime: $('#datetimepicker').val(),
                    type: $('#eventType').val()
                };

                sendRequest(url, data);

                return false;
            });

            $table.off('click', '.btn-edit');
            $table.on('click', '.btn-edit', function () {
                $shareGetInModalButton.show();
                var $button = $(this);
                var $tr = $button.parent().parent().parent();
                var $tds = $tr.find('td');
                var $modalTitle = $modal.find('.modal-title');
                var $modalBody = $modal.find('.modal-body');
                var $eventName = $modalBody.find('.event-name');
                var $eventType = $modalBody.find('.event-type');

                var $saveButton = $('#saveButton');
                var $deleteButton = $('#deleteButton');
                var defaultModalTitle = $modalTitle.text();

                var id = $button.attr('id');

                $shareGetInModalButton.off('click');
                $shareGetInModalButton.on('click', function () {
                    window.modalShareWork(id);
                    $modal.modal('hide');
                    return false;
                });

                var name = $tds.eq(1).text();
                var date = $tds.eq(6).text();
                var event = $tds.eq(5).text();

                $eventName.val(name);
                $datetimepicker.val(date);


                $eventType.find('option')
                    .filter(function () {
                        return $(this).val() === event;
                    })
                    .prop('selected', true);

                $modalTitle.text('@Resource.Edit @Resource.Event');

                $submitAddButton.hide();
                $saveButton.show();
                $deleteButton.show();
                $modal.modal('show');

                $modal.on('hidden.bs.modal', function () {
                    $modalTitle.text(defaultModalTitle);
                    $eventName.val('');

                    $saveButton.hide();
                    $deleteButton.hide();
                    $submitAddButton.show();

                    return false;
                });

                $saveButton.off('click');
                $saveButton.on('click', function () {

                    url = '/Home/EditEvent';
                    data = {
                        id: id,
                        name: $('#eventName').val(),
                        datetime: $('#datetimepicker').val(),
                        type: $('#eventType').val()
                    };

                    sendRequest(url, data);
                    return false;
                });

                $deleteButton.off('click');
                $deleteButton.on('click', function () {

                    url = '/Home/DeleteEvent';
                    data = {
                        id: id
                    };

                    sendRequest(url, data);
                    return false;
                });
                return false;
            });

            $table.off('click', '.btn-share');
            $table.on('click', '.btn-share', function () {
                var $item = $(this);
                var id = $item.attr('id');
                window.modalShareWork(id);

                return false;
            });

        });
    })(jQuery);
</script>
